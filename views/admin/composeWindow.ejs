<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create Window System</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

  
  <style>
    /* Enhanced Step Indicators */
    .step-active { 
      background: linear-gradient(135deg, #3b82f6, #1d4ed8); 
      color: white; 
      box-shadow: 0 4px 15px rgba(59, 130, 246, 0.4);
      transform: scale(1.05);
      transition: all 0.3s ease;
    }
    .step-complete { 
      background: linear-gradient(135deg, #10b981, #059669); 
      color: white; 
      box-shadow: 0 4px 15px rgba(16, 185, 129, 0.4);
      transition: all 0.3s ease;
    }
    .step-inactive { 
      background: linear-gradient(135deg, #f3f4f6, #e5e7eb); 
      color: #6b7280; 
      border: 1px solid #d1d5db;
      transition: all 0.3s ease;
    }
    
    /* Enhanced Form Sections */
    .form-section { 
      display: none; 
      animation: fadeInUp 0.5s ease-out;
    }
    .form-section.active { 
      display: block; 
    }
    
    /* Ensure hidden class works properly */
    .hidden {
      display: none !important;
    }
    
    .form-section {
      margin-bottom: 2rem;
      padding: 2rem;
      border: 2px solid #e5e7eb;
      border-radius: 1rem;
      background: linear-gradient(135deg, #ffffff, #f8fafc);
      position: relative;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      transition: all 0.3s ease;
    }
    
    .form-section.active {
      border-color: #3b82f6;
      box-shadow: 0 10px 25px -5px rgba(59, 130, 246, 0.3);
      transform: translateY(-2px);
    }
    
    /* Enhanced Form Controls */
    .form-control {
      transition: all 0.3s ease;
      border: 2px solid #e5e7eb;
      border-radius: 0.75rem;
      padding: 0.875rem 1rem;
      font-size: 1rem;
      background: white;
    }
    
    .form-control:focus {
      border-color: #3b82f6;
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
      outline: none;
      transform: translateY(-1px);
    }
    
    /* Enhanced Buttons */
    .btn-primary {
      background: linear-gradient(135deg, #3b82f6, #1d4ed8);
      color: white;
      border: none;
      padding: 0.875rem 1.5rem;
      border-radius: 0.75rem;
      font-weight: 600;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(59, 130, 246, 0.4);
      background: linear-gradient(135deg, #2563eb, #1e40af);
    }
    
    .btn-secondary {
      background: linear-gradient(135deg, #6b7280, #4b5563);
      color: white;
      border: none;
      padding: 0.875rem 1.5rem;
      border-radius: 0.75rem;
      font-weight: 600;
      transition: all 0.3s ease;
    }
    
    .btn-secondary:hover {
      transform: translateY(-2px);
      background: linear-gradient(135deg, #4b5563, #374151);
    }
    
    .btn-success {
      background: linear-gradient(135deg, #10b981, #059669);
      color: white;
      border: none;
      padding: 0.875rem 1.5rem;
      border-radius: 0.75rem;
      font-weight: 600;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(16, 185, 129, 0.3);
    }
    
    .btn-success:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(16, 185, 129, 0.4);
    }
    
    /* Enhanced Upload Area */
    #uploadArea {
      transition: all 0.3s ease;
      user-select: none;
      border: 3px dashed #d1d5db;
      border-radius: 1rem;
      background: linear-gradient(135deg, #f8fafc, #f1f5f9);
      cursor: pointer;
    }
    
    #uploadArea:hover {
      border-color: #3b82f6;
      background: linear-gradient(135deg, #eff6ff, #dbeafe);
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(59, 130, 246, 0.15);
    }
    
    /* Enhanced Info Boxes */
    .info-box {
      background: linear-gradient(135deg, #eff6ff, #dbeafe);
      border: 1px solid #bfdbfe;
      border-radius: 1rem;
      padding: 1.5rem;
      margin: 1.5rem 0;
      position: relative;
      overflow: hidden;
    }
    
    .info-box::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 4px;
      height: 100%;
      background: linear-gradient(135deg, #3b82f6, #1d4ed8);
    }
    
    /* Enhanced Tables */
    .enhanced-table {
      background: white;
      border-radius: 1rem;
      overflow: hidden;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      border: 1px solid #e5e7eb;
    }
    
    .enhanced-table th {
      background: linear-gradient(135deg, #f8fafc, #f1f5f9);
      padding: 1rem;
      font-weight: 600;
      color: #374151;
      border-bottom: 2px solid #e5e7eb;
    }
    
    .enhanced-table td {
      padding: 1rem;
      border-bottom: 1px solid #f3f4f6;
      transition: background-color 0.2s ease;
    }
    
    .enhanced-table tr:hover td {
      background-color: #f8fafc;
    }
    
    /* Enhanced Help Tooltips */
    .help-tooltip { 
      position: relative; 
      display: inline-block; 
    }
    
    .help-tooltip .tooltip-text {
      visibility: hidden;
      width: 250px;
      background: linear-gradient(135deg, #1f2937, #374151);
      color: #fff;
      text-align: center;
      border-radius: 0.75rem;
      padding: 0.75rem;
      position: absolute;
      z-index: 1000;
      bottom: 125%;
      left: 50%;
      margin-left: -125px;
      opacity: 0;
      transition: all 0.3s ease;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
      font-size: 0.875rem;
      line-height: 1.4;
    }
    
    .help-tooltip:hover .tooltip-text {
      visibility: visible;
      opacity: 1;
      transform: translateY(-5px);
    }
    
    /* Animations */
    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    @keyframes pulse {
      0%, 100% {
        transform: scale(1);
      }
      50% {
        transform: scale(1.05);
      }
    }
    
    /* Enhanced Step Progress */
    .step-progress {
      background: linear-gradient(135deg, #f8fafc, #f1f5f9);
      border-radius: 1rem;
      padding: 1.5rem;
      margin-bottom: 2rem;
      border: 1px solid #e5e7eb;
    }
    
    .step-progress h3 {
      color: #1f2937;
      font-weight: 700;
      margin-bottom: 1rem;
      text-align: center;
    }
    
    /* Enhanced Form Labels */
    .form-label {
      font-weight: 600;
      color: #374151;
      margin-bottom: 0.5rem;
      display: block;
      font-size: 0.95rem;
    }
    
    /* Enhanced Section Headers */
    .section-header {
      background: linear-gradient(135deg, #3b82f6, #1d4ed8);
      color: white;
      padding: 1.5rem;
      border-radius: 1rem 1rem 0 0;
      margin: -2rem -2rem 2rem -2rem;
      position: relative;
      overflow: hidden;
    }
    
    .section-header::before {
      content: '';
      position: absolute;
      top: 0;
      right: 0;
      width: 100px;
      height: 100px;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 50%;
      transform: translate(30px, -30px);
    }
    
    .section-header h2 {
      margin: 0;
      font-weight: 700;
      font-size: 1.5rem;
    }
    
    /* Responsive Design */
    @media (max-width: 768px) {
      .form-section {
        padding: 1.5rem;
        margin-bottom: 1.5rem;
      }
      
      .section-header {
        padding: 1rem;
        margin: -1.5rem -1.5rem 1.5rem -1.5rem;
      }
      
      .section-header h2 {
        font-size: 1.25rem;
      }
    }
    
    /* Enhanced Visual Effects */
    .step-indicator {
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      cursor: pointer;
    }
    
    .step-indicator:hover {
      transform: translateY(-2px);
    }
    
    /* Enhanced Form Section Transitions */
    .form-section {
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    /* Enhanced Button Interactions */
    .btn-primary:active,
    .btn-secondary:active,
    .btn-success:active {
      transform: translateY(0);
    }
    
    /* Enhanced Upload Area States */
    #uploadArea.dragover {
      border-color: #3b82f6 !important;
      background: linear-gradient(135deg, #eff6ff, #dbeafe) !important;
      transform: scale(1.02);
      box-shadow: 0 8px 25px rgba(59, 130, 246, 0.2);
    }
    
    /* Ensure upload area is visible when not hidden */
    #uploadArea:not(.hidden) {
      display: flex !important;
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }
    
    /* Ensure preview is properly styled */
    #imagePreview {
      text-align: center;
    }
    
    #imagePreview img {
      max-width: 100%;
      height: auto;
      border-radius: 0.5rem;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    /* Enhanced Table Row Interactions */
    .enhanced-table tr {
      transition: all 0.2s ease;
    }
    
    .enhanced-table tr:hover {
      transform: translateX(2px);
    }
    
    /* Enhanced Section Header Animation */
    .section-header::before {
      animation: float 6s ease-in-out infinite;
    }
    
    @keyframes float {
      0%, 100% {
        transform: translate(30px, -30px);
      }
      50% {
        transform: translate(20px, -20px);
      }
    }
  </style>
</head>
<body class="bg-gray-50">
  <%- include('../partials/_header.ejs') %>
  <div class="container mx-auto py-8 px-4">
    <div class="text-center mb-8">
      <h1 class="text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600 mb-4">
        Create New Window System
      </h1>
      <p class="text-lg text-gray-600 max-w-2xl mx-auto">
        Build a comprehensive window system by configuring profiles, accessories, muntins, and glass specifications
      </p>
    </div>
    
    <!-- Enhanced Step Indicator -->
    <div class="step-progress">
      <h3 class="text-lg font-semibold text-gray-700 mb-6">Progress</h3>
      <div class="flex justify-center space-x-2">
        <div id="step1-indicator" class="step-indicator step-active rounded-xl py-3 px-6 flex items-center font-medium">
          <span class="mr-3 text-lg font-bold">1</span> Window Type
        </div>
        <div id="step2-indicator" class="step-indicator step-inactive rounded-xl py-3 px-6 flex items-center font-medium">
          <span class="mr-3 text-lg font-bold">2</span> Profiles
        </div>
        <div id="step3-indicator" class="step-indicator step-inactive rounded-xl py-3 px-6 flex items-center font-medium">
          <span class="mr-3 text-lg font-bold">3</span> Accessories
        </div>
        <div id="step4-indicator" class="step-indicator step-inactive rounded-xl py-3 px-6 flex items-center font-medium">
          <span class="mr-3 text-lg font-bold">4</span> Muntins
        </div>
        <div id="step5-indicator" class="step-indicator step-inactive rounded-xl py-3 px-6 flex items-center font-medium">
          <span class="mr-3 text-lg font-bold">5</span> Glass Restrictions
        </div>
      </div>
    </div>
    
    <div class="bg-gradient-to-br from-white to-gray-50 shadow-2xl rounded-3xl p-8 border border-gray-100">
      <form id="window-form" action="/admin/compose-window/compose" method="POST" enctype="multipart/form-data">
        
        <!-- Step 1: Window Type -->
        <div id="step1-section" class="form-section active">
          <div class="section-header">
            <h2>Step 1: Basic Information</h2>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Window Type -->
            <div class="mb-6">
              <label for="type" class="form-label">
                Window Type
                <span class="help-tooltip ml-2">
                  <i class="fas fa-question-circle text-blue-500"></i>
                  <span class="tooltip-text">Enter the type of window system you are creating (e.g., Fixed Window, Casement, Double-Hung)</span>
                </span>
              </label>
              <input type="text" id="type" name="type" class="form-control w-full" placeholder="e.g., Fixed Window" required>
            </div>
            
            <!-- Window System Image -->
            <div class="mb-6">
              <label for="windowImage" class="form-label">
                Window System Image
                <span class="help-tooltip ml-2">
                  <i class="fas fa-question-circle text-blue-500"></i>
                  <span class="tooltip-text">Upload an image that represents this window system. This will be used in quotes and previews.</span>
                </span>
              </label>
              
              <!-- Image Preview (shown when image is uploaded) -->
              <div id="imagePreview" class="hidden mb-4 p-6 bg-gradient-to-br from-blue-50 to-indigo-50 border-2 border-blue-200 rounded-xl text-center">
                <img id="previewImg" src="" alt="Window System Preview" class="max-w-full h-32 object-contain mx-auto rounded-lg border-2 border-gray-200 mb-3">
                <div class="text-sm text-blue-700 font-medium">Image uploaded successfully!</div>
              </div>
              
              <!-- Upload Area (hidden when image is uploaded) -->
              <div id="uploadArea" class="cursor-pointer p-8 text-center">
                <div class="upload-content">
                  <i class="fas fa-cloud-upload-alt text-5xl text-gray-400 mb-4"></i>
                  <h3 class="text-lg font-semibold text-gray-700 mb-2">Upload Window System Image</h3>
                  <p class="text-gray-600 mb-3">Click to upload or drag and drop your image here</p>
                  <p class="text-sm text-gray-500 mb-4">Supports PNG, JPG, GIF up to 5MB</p>
                  <div class="bg-blue-50 border border-blue-200 rounded-lg p-3 text-sm text-blue-700">
                    <i class="fas fa-info-circle mr-2"></i>
                    This image will be used consistently across all quotes for this window system
                  </div>
                </div>
                <input type="file" id="windowImage" name="windowImage" accept="image/*" class="hidden" onchange="handleImageUpload(this)">
                

              </div>
            </div>
          </div>
          
          <div class="mt-8 flex justify-between items-center">
            <a href="/admin" class="btn-secondary px-6 py-3">
              <i class="fas fa-arrow-left mr-2"></i>Back to Admin
            </a>
            <button type="button" id="to-step2-btn" class="btn-primary px-6 py-3">
              Next Step<i class="fas fa-arrow-right ml-2"></i>
            </button>
          </div>
        </div>
        
        <!-- Step 2: Profiles -->
        <div id="step2-section" class="form-section">
          <div class="section-header">
            <h2>Step 2: Profiles</h2>
          </div>
          
          <div class="info-box">
            <div class="flex items-start">
              <i class="fas fa-info-circle text-blue-500 text-xl mr-3 mt-1"></i>
              <div>
                <h4 class="font-semibold text-blue-800 mb-1">Profile Configuration</h4>
                <p class="text-blue-700">
                  Add profiles that compose this window system. Select profile type, specify quantity, orientation, and any length discount needed.
                </p>
              </div>
            </div>
          </div>

          <!-- Profiles Section -->
          <div id="profiles-section" class="mb-8">
            <div class="p-4 bg-gray-50 rounded-lg shadow-sm mb-4">
              <div class="grid grid-cols-1 md:grid-cols-6 gap-4">
                <div class="md:col-span-2">
                  <label for="profile-id" class="form-label">Profile Type</label>
                  <select id="profile-id" class="form-control w-full">
                    <option value="">Select Profile</option>
                    <% profiles.forEach(profile => { %>
                      <option value="<%= profile._id %>"><%= profile.name %></option>
                    <% }); %>
                  </select>
                </div>
                
                <div>
                  <label for="profile-quantity" class="form-label">Quantity</label>
                  <input type="number" id="profile-quantity" placeholder="Qty" min="1" class="form-control w-full">
                </div>
                
                <div>
                  <label for="profile-orientation" class="form-label">Orientation</label>
                  <select id="profile-orientation" class="form-control w-full">
                    <option value="" disabled selected>Select</option>
                    <option value="horizontal">Horizontal</option>
                    <option value="vertical">Vertical</option>
                  </select>
                </div>
                
                <div>
                  <label for="profile-length-discount" class="form-label">Length Discount</label>
                  <div class="flex items-center">
                    <input type="number" id="profile-length-discount" placeholder="0.0" step="0.01" min="0" class="form-control w-full">
                    <span class="ml-2 text-gray-600 font-medium">in.</span>
                  </div>
                </div>
                
                <div>
                  <label for="profile-show-to-user" class="form-label">User Configurable</label>
                  <div class="flex items-center mt-2">
                    <input type="checkbox" id="profile-show-to-user" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
                    <label for="profile-show-to-user" class="ml-2 text-sm text-gray-700">Show to users</label>
                  </div>
                  <p class="text-xs text-gray-500 mt-1">Allow users to modify this profile</p>
                </div>
              </div>
              
              <div class="mt-4 text-right">
                <button type="button" onclick="addProfileEntry()" class="btn-success px-6 py-3">
                  <i class="fas fa-plus mr-2"></i>Add Profile
                </button>
              </div>
            </div>

            <!-- Table to display added profiles -->
            <div class="mt-6 overflow-x-auto">
              <h3 class="text-lg font-medium text-gray-700 mb-3">Added Profiles</h3>
              <table class="enhanced-table min-w-full">
                <thead>
                  <tr>
                    <th>Profile</th>
                    <th>Quantity</th>
                    <th>Orientation</th>
                    <th>Length Discount</th>
                    <th>User Config</th>
                    <th>Action</th>
                  </tr>
                </thead>
                <tbody id="profiles-table-body">
                  <!-- Rows will be dynamically added here -->
                </tbody>
              </table>
              <div id="profiles-empty-state" class="text-center py-8 text-gray-500 italic bg-gray-50 rounded-lg mt-4">
                No profiles added yet. Add at least one profile to continue.
              </div>
            </div>
          </div>

          <div class="mt-8 flex justify-between items-center">
            <button type="button" id="back-to-step1-btn" class="btn-secondary px-6 py-3">
              <i class="fas fa-arrow-left mr-2"></i>Previous Step
            </button>
            <button type="button" id="to-step3-btn" class="btn-primary px-6 py-3">
              Next Step<i class="fas fa-arrow-right ml-2"></i>
            </button>
          </div>
        </div>
        
        <!-- Step 3: Accessories -->
        <div id="step3-section" class="form-section">
          <div class="section-header">
            <h2>Step 3: Accessories</h2>
          </div>
          
          <div class="info-box">
            <div class="flex items-start">
              <i class="fas fa-info-circle text-blue-500 text-xl mr-3 mt-1"></i>
              <div>
                <h4 class="font-semibold text-blue-800 mb-1">Accessory Configuration</h4>
                <p class="text-blue-700">
                  Add any accessories needed for this window system. The unit will be automatically set based on the selected accessory.
                </p>
              </div>
            </div>
          </div>

          <div id="accessories-section" class="mb-8">
            <div class="p-4 bg-gray-50 rounded-lg shadow-sm mb-4">
              <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
                <div class="md:col-span-2">
                  <label for="accessory-id" class="form-label">Accessory Type</label>
                  <select id="accessory-id" class="form-control w-full">
                    <option value="">Select Accessory</option>
                    <% accessories.forEach(accessory => { %>
                      <option value="<%= accessory._id %>" data-unit="<%= accessory.unit %>"><%= accessory.name %></option>
                    <% }); %>
                  </select>
                </div>
                
                <div>
                  <label for="accessory-quantity" class="form-label">Quantity</label>
                  <input type="number" id="accessory-quantity" placeholder="Qty" min="1" class="form-control w-full">
                </div>
                
                <div>
                  <label for="accessory-unit" class="form-label">Unit</label>
                  <input type="text" id="accessory-unit" placeholder="Unit" class="form-control w-full bg-gray-50" readonly>
                </div>
                
                <div>
                  <label for="accessory-show-to-user" class="form-label">User Configurable</label>
                  <div class="flex items-center mt-2">
                    <input type="checkbox" id="accessory-show-to-user" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
                    <label for="accessory-show-to-user" class="ml-2 text-sm text-gray-700">Show to users</label>
                  </div>
                  <p class="text-xs text-gray-500 mt-1">Allow users to modify this accessory</p>
                </div>
              </div>
              
              <!-- Advanced Configuration (only show when user configurable is checked) -->
              <div id="accessory-advanced-config" class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4 pt-4 border-t border-gray-200" style="display: none;">
                <div>
                  <label for="accessory-component-group-select" class="block text-gray-700 font-medium mb-1">Component Group:</label>
                  <select id="accessory-component-group-select" class="form-control shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500" onchange="toggleCustomGroupInput()">
                    <option value="">Select a group...</option>
                    <% componentGroups.forEach(group => { %>
                      <option value="<%= group.name %>"><%= group.displayName %></option>
                    <% }); %>
                    <option value="custom">Custom (Type your own)</option>
                  </select>
                  <input type="text" id="accessory-component-group-custom" placeholder="Enter custom group name" class="form-control shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500 mt-2" style="display: none;">
                  <input type="hidden" id="accessory-component-group" value="">
                  <p class="text-xs text-gray-500 mt-1">Group related components together for user selection</p>
                </div>
                
                <div>
                  <label for="accessory-selection-type" class="block text-gray-700 font-medium mb-1">Selection Type:</label>
                  <select id="accessory-selection-type" class="form-control shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500">
                    <option value="quantity">Quantity (Default)</option>
                    <option value="single">Single Choice</option>
                    <option value="multiple">Multiple Choice</option>
                  </select>
                  <p class="text-xs text-gray-500 mt-1">How users can select this component</p>
                </div>
                
                <div>
                  <label for="accessory-is-default" class="block text-gray-700 font-medium mb-1">Default Choice:</label>
                  <div class="flex items-center mt-2">
                    <input type="checkbox" id="accessory-is-default" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
                    <label for="accessory-is-default" class="ml-2 text-sm text-gray-700">Default selection</label>
                  </div>
                  <p class="text-xs text-gray-500 mt-1">Pre-select this in choice groups</p>
                </div>
              </div>
              
              <div class="mt-4 text-right">
                <button type="button" onclick="addAccessoryEntry()" class="btn-success px-6 py-3">
                  <i class="fas fa-plus mr-2"></i>Add Accessory
                </button>
              </div>
            </div>

            <!-- Table to display added accessories -->
            <div class="mt-6 overflow-x-auto">
              <h3 class="text-lg font-medium text-gray-700 mb-3">Added Accessories</h3>
              <table class="enhanced-table min-w-full">
                <thead>
                  <tr>
                    <th>Accessory</th>
                    <th>Quantity</th>
                    <th>Unit</th>
                    <th>User Config</th>
                    <th>Choice Group</th>
                    <th>Action</th>
                  </tr>
                </thead>
                <tbody id="accessories-table-body">
                  <!-- Rows will be dynamically added here -->
                </tbody>
              </table>
              <div id="accessories-empty-state" class="text-center py-8 text-gray-500 italic bg-gray-50 rounded-lg mt-4">
                No accessories added yet.
              </div>
            </div>
          </div>

          <div class="mt-8 flex justify-between items-center">
            <button type="button" id="back-to-step2-btn" class="btn-secondary px-6 py-3">
              <i class="fas fa-arrow-left mr-2"></i>Previous Step
            </button>
            <button type="button" id="to-step4-btn" class="btn-primary px-6 py-3">
              Next Step<i class="fas fa-arrow-right ml-2"></i>
            </button>
          </div>
        </div>
        
        <!-- Step 4: Muntin Configuration -->
        <div id="step4-section" class="form-section">
          <div class="section-header">
            <h2>Step 4: Muntin Configuration</h2>
          </div>
          
          <div class="info-box">
            <div class="flex items-start">
              <i class="fas fa-info-circle text-blue-500 text-xl mr-3 mt-1"></i>
              <div>
                <h4 class="font-semibold text-blue-800 mb-1">Muntin Configuration</h4>
                <p class="text-blue-700">
                  Configure ornamental muntins for this window system. Muntins are decorative dividers that create multiple panes within a single glass unit.
                </p>
              </div>
            </div>
          </div>

          <div class="mb-8">
            <div class="p-6 bg-gray-50 rounded-lg shadow-sm mb-4">
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label for="muntin-enabled" class="form-label">Enable Muntins</label>
                  <div class="flex items-center">
                    <input type="checkbox" id="muntin-enabled" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" onchange="toggleMuntinConfiguration()">
                    <label for="muntin-enabled" class="ml-2 text-sm text-gray-700">Include muntins in this window system</label>
                  </div>
                </div>
                
                <div id="muntin-config" style="display: none;">
                  <label for="muntin-profile" class="form-label">Muntin Profile</label>
                  <select id="muntin-profile" class="form-control w-full">
                    <option value="">Select Muntin Profile</option>
                    <% if (profiles.filter(p => p.isMuntin).length > 0) { %>
                      <% profiles.forEach(profile => { %>
                        <% if (profile.isMuntin) { %>
                          <option value="<%= profile._id %>" data-type="<%= profile.muntinType %>" data-pattern="<%= profile.muntinPattern %>">
                            <%= profile.name %> - <%= profile.muntinType.charAt(0).toUpperCase() + profile.muntinType.slice(1) %>
                          </option>
                        <% } %>
                      <% }); %>
                    <% } else { %>
                      <!-- Fallback: Show all profiles if no muntin profiles exist -->
                      <% profiles.forEach(profile => { %>
                        <option value="<%= profile._id %>" data-type="colonial" data-pattern="">
                          <%= profile.name %> - (Can be used as muntin)
                        </option>
                      <% }); %>
                    <% } %>
                  </select>
                  <p class="text-xs text-gray-500 mt-1">Select the muntin profile from available options</p>
                </div>
              </div>
              
              <div id="muntin-details" class="mt-6 grid grid-cols-1 md:grid-cols-2 gap-6" style="display: none;">
                <div>
                  <label for="muntin-type" class="form-label">Muntin Type</label>
                  <select id="muntin-type" class="form-control w-full">
                    <option value="colonial">Colonial</option>
                    <option value="geometric">Geometric</option>
                    <option value="custom">Custom</option>
                  </select>
                  <p class="text-xs text-gray-500 mt-1">Style of muntin pattern</p>
                </div>
                
                <div>
                  <label for="muntin-show-to-user" class="block text-gray-700 font-medium mb-2">User Configurable:</label>
                  <div class="flex items-center">
                    <input type="checkbox" id="muntin-show-to-user" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
                    <label for="muntin-show-to-user" class="ml-2 text-sm text-gray-700">Allow users to configure muntin details when quoting</label>
                  </div>
                  <p class="text-xs text-gray-500 mt-1">Users can set divisions and spacing when quoting</p>
                </div>
              </div>
              
              <div class="mt-4 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg">
                <div class="flex items-start">
                  <i class="fas fa-lightbulb text-blue-500 text-lg mr-3 mt-0.5"></i>
                  <div>
                    <p class="text-sm text-blue-700 font-medium">
                      <strong>Note:</strong> Users will be able to configure the number of horizontal/vertical divisions and spacing when quoting windows with this system.
                    </p>
                  </div>
                </div>
              </div>
              
              <div id="muntin-preview" class="mt-6 p-6 bg-gradient-to-br from-blue-50 to-indigo-50 border-2 border-blue-200 rounded-xl" style="display: none;">
                <h4 class="text-lg font-semibold text-blue-800 mb-4 text-center">Muntin Preview</h4>
                <div class="flex justify-center mb-4">
                  <div id="muntin-preview-grid" class="w-40 h-40 border-2 border-blue-300 mx-auto bg-white rounded-lg shadow-lg relative overflow-hidden">
                    <!-- Preview grid will be generated here -->
                  </div>
                </div>
                <p class="text-sm text-blue-700 text-center font-medium" id="muntin-preview-text">1x1 Colonial Grid</p>
                <div class="mt-3 text-center">
                  <div class="inline-flex items-center px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium">
                    <i class="fas fa-eye mr-1"></i>
                    Preview
                  </div>
                </div>
              </div>
              

            </div>
          </div>
          
          <div class="mt-8 flex justify-between items-center">
            <button type="button" id="back-to-step3-btn" class="btn-secondary px-6 py-3">
              <i class="fas fa-arrow-left mr-2"></i>Previous Step
            </button>
            <button type="button" id="to-step5-btn" class="btn-primary px-6 py-3">
              Next Step<i class="fas fa-arrow-right ml-2"></i>
            </button>
          </div>
        </div>
        
        <!-- Step 5: Glass Restrictions -->
        <div id="step5-section" class="form-section">
          <div class="section-header">
            <h2>Step 5: Glass Restrictions</h2>
          </div>
          
          <div class="info-box">
            <div class="flex items-start">
              <i class="fas fa-info-circle text-blue-500 text-xl mr-3 mt-1"></i>
              <div>
                <h4 class="font-semibold text-blue-800 mb-1">Glass Restrictions</h4>
                <p class="text-blue-700">
                  Define the glass restrictions for this window system. Specify glass type, dimensions, and pressure ratings.
                </p>
                <div class="mt-3 p-3 bg-green-50 border border-green-200 rounded-lg">
                  <p class="text-sm text-green-700 font-medium">
                    <i class="fas fa-check-circle mr-2"></i>
                    This is the final step. Complete this section and click "Create Window System" to finish.
                  </p>
                </div>
              </div>
            </div>
          </div>

          <div class="mb-8">
            <div class="p-6 bg-gray-50 rounded-lg shadow-sm mb-4">
              <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                  <label for="glass-type" class="form-label">Glass Type</label>
                  <select id="glass-type" class="form-control w-full">
                    <option value="">Select Type</option>
                    <option value="A">A</option>
                    <option value="B">B</option>
                    <option value="C">C</option>
                    <option value="Ai">Ai</option>
                    <option value="Bi">Bi</option>
                  </select>
                  <p class="text-xs text-gray-500 mt-1">Select the appropriate glass type</p>
                </div>
                
                <div>
                  <label for="glass-width" class="form-label">Width</label>
                  <div class="flex items-center">
                    <input type="number" id="glass-width" min="0" step="0.01" class="form-control w-full">
                    <span class="ml-2 text-gray-600 font-medium">inches</span>
                  </div>
                  <p class="text-xs text-gray-500 mt-1">Maximum width allowed</p>
                </div>
                
                <div>
                  <label for="glass-height" class="form-label">Height</label>
                  <div class="flex items-center">
                    <input type="number" id="glass-height" min="0" step="0.01" class="form-control w-full">
                    <span class="ml-2 text-gray-600 font-medium">inches</span>
                  </div>
                  <p class="text-xs text-gray-500 mt-1">Maximum height allowed</p>
                </div>
                
                <div>
                  <label for="glass-positive-pressure" class="form-label">
                    Positive Pressure (EXT+)
                    <span class="help-tooltip ml-2">
                      <i class="fas fa-question-circle text-blue-500"></i>
                      <span class="tooltip-text">Maximum positive pressure rating</span>
                    </span>
                  </label>
                  <input type="number" id="glass-positive-pressure" min="0" step="0.01" class="form-control w-full">
                </div>
                
                <div>
                  <label for="glass-negative-pressure" class="form-label">
                    Negative Pressure (EXT)
                    <span class="help-tooltip ml-2">
                      <i class="fas fa-question-circle text-blue-500"></i>
                      <span class="tooltip-text">Maximum negative pressure rating</span>
                    </span>
                  </label>
                  <input type="number" id="glass-negative-pressure" min="0" step="0.01" class="form-control w-full">
                </div>
              </div>
              
              <div class="mt-6 text-right">
                <button type="button" class="btn-success px-6 py-3" onclick="addGlassRestriction()">
                  <i class="fas fa-plus mr-2"></i>Add Glass Restriction
                </button>
              </div>
            </div>

            <!-- Table to display added glass restrictions -->
            <div class="mt-6 overflow-x-auto">
              <h3 class="text-lg font-medium text-gray-700 mb-3">Added Glass Restrictions</h3>
              <table class="enhanced-table min-w-full">
                <thead>
                  <tr>
                    <th>Type</th>
                    <th>Width (inches)</th>
                    <th>Height (inches)</th>
                    <th>Positive Pressure</th>
                    <th>Negative Pressure</th>
                    <th>Action</th>
                  </tr>
                </thead>
                <tbody id="glass-restrictions-table-body">
                  <!-- Rows will be dynamically added here -->
                </tbody>
              </table>
              <div id="glass-restrictions-empty-state" class="text-center py-8 text-gray-500 italic bg-gray-50 rounded-lg mt-4">
                No glass restrictions added yet. Add at least one restriction to continue.
              </div>
            </div>
          </div>

          <div class="mt-8 flex justify-between items-center">
            <button type="button" id="back-to-step4-btn" class="btn-secondary px-6 py-3">
              <i class="fas fa-arrow-left mr-2"></i>Previous Step
            </button>
            <button type="submit" class="btn-success px-8 py-3 text-lg font-bold">
              <i class="fas fa-check mr-2"></i>Create Window System
            </button>
          </div>
        </div>
      </form>
      
      <div class="mt-8 text-center">
        <a href="/admin" class="inline-flex items-center px-6 py-3 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition duration-200 font-medium">
          <i class="fas fa-arrow-circle-left mr-2"></i>Back to Admin Console
        </a>
      </div>
    </div>
  </div>
  <%- include('../partials/_footer.ejs') %>

  <script>
    let profiles = [];
    let accessories = [];
    let glassRestrictions = [];
    let currentStep = 1;
    
    // Initialize the page
    document.addEventListener('DOMContentLoaded', function() {
      try {
        updateEmptyStates();
        setupStepNavigation();
        setupAdvancedConfigToggle();
        setupImageUpload();
        
        // Initialize first step - ensure only step 1 is visible
        document.getElementById('step1-section').style.display = 'block';
        document.getElementById('step2-section').style.display = 'none';
        document.getElementById('step3-section').style.display = 'none';
        document.getElementById('step4-section').style.display = 'none';
        document.getElementById('step5-section').style.display = 'none';
        
        // Call goToStep to set up indicators
        goToStep(1);
        

      } catch (error) {
        console.error('Error during page initialization:', error);

      }
    });
    
    // Setup image upload functionality
    function setupImageUpload() {
      const uploadArea = document.getElementById('uploadArea');
      const fileInput = document.getElementById('windowImage');
      
      if (!uploadArea || !fileInput) {
        console.error('Image upload elements not found');
        return;
      }
      
      // Click to upload
      uploadArea.addEventListener('click', () => {
        fileInput.click();
      });
      
      // Enhanced drag and drop with better visual feedback
      uploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        e.stopPropagation();
        uploadArea.classList.add('dragover');
        uploadArea.style.borderColor = '#3b82f6';
        uploadArea.style.backgroundColor = '#eff6ff';
      });
      
      uploadArea.addEventListener('dragenter', (e) => {
        e.preventDefault();
        e.stopPropagation();
        uploadArea.classList.add('dragover');
      });
      
      uploadArea.addEventListener('dragleave', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        // Only remove dragover class if we're actually leaving the upload area
        if (!uploadArea.contains(e.relatedTarget)) {
          uploadArea.classList.remove('dragover');
          uploadArea.style.borderColor = '#d1d5db';
          uploadArea.style.backgroundColor = 'transparent';
        }
      });
      
      uploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        // Remove dragover styling
        uploadArea.classList.remove('dragover');
        uploadArea.style.borderColor = '#d1d5db';
        uploadArea.style.backgroundColor = 'transparent';
        
        const files = e.dataTransfer.files;
        if (files.length > 0) {
          console.log('Files dropped:', files.length);
          fileInput.files = files;
          handleImageUpload(fileInput);
        }
      });
      
      // Prevent default drag behaviors on document
      document.addEventListener('dragover', (e) => {
        e.preventDefault();
      });
      
      document.addEventListener('drop', (e) => {
        e.preventDefault();
      });
      
      // Add some debugging
      console.log('Image upload setup completed');
      console.log('Upload area:', uploadArea);
      console.log('File input:', fileInput);
    }
    

    
    // Handle image upload and preview
    function handleImageUpload(input) {
      console.log('handleImageUpload called with:', input);
      
      const file = input.files[0];
      if (!file) {
        console.log('No file selected');
        return;
      }
      
      console.log('File selected:', file.name, 'Type:', file.type, 'Size:', file.size);
      
      // Validate file type
      if (!file.type.startsWith('image/')) {
        console.error('Invalid file type:', file.type);
        showAlert('Please select a valid image file.');
        return;
      }
      
      // Validate file size (5MB limit)
      if (file.size > 5 * 1024 * 1024) {
        console.error('File too large:', file.size);
        showAlert('Image size must be less than 5MB.');
        return;
      }
      
      console.log('File validation passed, creating preview...');
      
      // Create preview
      const reader = new FileReader();
      reader.onload = function(e) {
        console.log('File read successfully');
        console.log('File result:', e.target.result);
        
        const preview = document.getElementById('imagePreview');
        const previewImg = document.getElementById('previewImg');
        const uploadArea = document.getElementById('uploadArea');
        
        console.log('Preview element:', preview);
        console.log('PreviewImg element:', previewImg);
        console.log('UploadArea element:', uploadArea);
        
        if (!preview || !previewImg || !uploadArea) {
          console.error('Preview elements not found');
          return;
        }
        
        // Set the image source
        console.log('Setting image source...');
        previewImg.src = e.target.result;
        
        previewImg.onload = function() {
          console.log('Image loaded successfully');
          console.log('Image dimensions:', this.naturalWidth, 'x', this.naturalHeight);
        };
        
        previewImg.onerror = function() {
          console.error('Error loading image preview');
          showAlert('Error loading image preview.');
        };
        
        // Show preview and hide upload area
        console.log('Showing preview, hiding upload area...');
        preview.style.display = 'block';
        preview.classList.remove('hidden');
        uploadArea.style.display = 'none';
        uploadArea.classList.add('hidden');
        
        console.log('Preview display style:', preview.style.display);
        console.log('Upload area display style:', uploadArea.style.display);
        console.log('Preview classes after change:', preview.className);
        console.log('Upload area classes after change:', uploadArea.className);
        
        // Add remove button if it doesn't exist
        if (!document.getElementById('removeImageBtn')) {
          const removeBtn = document.createElement('button');
          removeBtn.id = 'removeImageBtn';
          removeBtn.type = 'button';
          removeBtn.className = 'btn-secondary mt-3 px-4 py-2 text-sm';
          removeBtn.innerHTML = '<i class="fas fa-trash mr-2"></i>Remove Image';
          removeBtn.onclick = removeImage;
          preview.appendChild(removeBtn);
        }
        
        console.log('Image preview created successfully');
      };
      
      reader.onerror = function(error) {
        console.error('Error reading file:', error);
        showAlert('Error reading the image file.');
      };
      
      reader.readAsDataURL(file);
    }
    
    // Remove uploaded image
    function removeImage() {
      const fileInput = document.getElementById('windowImage');
      const preview = document.getElementById('imagePreview');
      const uploadArea = document.getElementById('uploadArea');
      const removeBtn = document.getElementById('removeImageBtn');
      
      if (!fileInput || !preview || !uploadArea) {
        console.error('Required elements not found for removeImage');
        return;
      }
      
      // Clear the file input
      fileInput.value = '';
      
      // Hide preview and show upload area
      console.log('Hiding preview, showing upload area...');
      preview.style.display = 'none';
      preview.classList.add('hidden');
      uploadArea.style.display = 'block';
      uploadArea.classList.remove('hidden');
      
      console.log('Preview display style:', preview.style.display);
      console.log('Upload area display style:', uploadArea.style.display);
      
      // Remove the remove button
      if (removeBtn) {
        removeBtn.remove();
      }
      
      // Clear the preview image source
      const previewImg = document.getElementById('previewImg');
      if (previewImg) {
        previewImg.src = '';
      }
      
      console.log('Image removed successfully');
    }
    

    
    // Setup advanced configuration toggle
    function setupAdvancedConfigToggle() {
      try {
        const showToUserCheckbox = document.getElementById('accessory-show-to-user');
        const advancedConfig = document.getElementById('accessory-advanced-config');
        
        if (showToUserCheckbox && advancedConfig) {
          showToUserCheckbox.addEventListener('change', function() {
            if (this.checked) {
              advancedConfig.style.display = 'grid';
            } else {
              advancedConfig.style.display = 'none';
              // Reset advanced config fields when hiding
              const componentGroupSelect = document.getElementById('accessory-component-group-select');
              const componentGroupCustom = document.getElementById('accessory-component-group-custom');
              const componentGroup = document.getElementById('accessory-component-group');
              const selectionType = document.getElementById('accessory-selection-type');
              const isDefault = document.getElementById('accessory-is-default');
              
              if (componentGroupSelect) componentGroupSelect.value = '';
              if (componentGroupCustom) {
                componentGroupCustom.style.display = 'none';
                componentGroupCustom.value = '';
              }
              if (componentGroup) componentGroup.value = '';
              if (selectionType) selectionType.value = 'quantity';
              if (isDefault) isDefault.checked = false;
            }
          });
        }
      } catch (error) {
        console.error('Error in setupAdvancedConfigToggle:', error);
      }
    }
    
    // Toggle between dropdown and custom input for component groups
    function toggleCustomGroupInput() {
      const select = document.getElementById('accessory-component-group-select');
      const customInput = document.getElementById('accessory-component-group-custom');
      const hiddenInput = document.getElementById('accessory-component-group');
      
      if (select.value === 'custom') {
        customInput.style.display = 'block';
        customInput.focus();
        hiddenInput.value = customInput.value;
      } else {
        customInput.style.display = 'none';
        customInput.value = '';
        hiddenInput.value = select.value;
      }
    }
    
    // Update hidden input when custom text changes
    document.addEventListener('DOMContentLoaded', function() {
      const customInput = document.getElementById('accessory-component-group-custom');
      const hiddenInput = document.getElementById('accessory-component-group');
      
      customInput.addEventListener('input', function() {
        hiddenInput.value = this.value;
      });
    });
    
    // Muntin Configuration
    let muntinConfiguration = {
      enabled: false,
      muntinProfile: null,
      muntinType: 'colonial',
      showToUser: true
    };

    function toggleMuntinConfiguration() {
      const enabled = document.getElementById('muntin-enabled').checked;
      const configDiv = document.getElementById('muntin-config');
      const detailsDiv = document.getElementById('muntin-details');
      
      muntinConfiguration.enabled = enabled;
      
      if (enabled) {
        configDiv.style.display = 'block';
        detailsDiv.style.display = 'grid';
      } else {
        configDiv.style.display = 'none';
        detailsDiv.style.display = 'none';
      }
    }

    function updateMuntinPreview() {
      const type = document.getElementById('muntin-type').value;
      const previewGrid = document.getElementById('muntin-preview-grid');
      const previewText = document.getElementById('muntin-preview-text');
      
      // Update configuration
      muntinConfiguration.muntinType = type;
      
      // Generate a simple preview grid (1x1 as default)
      previewGrid.innerHTML = '';
      const cell = document.createElement('div');
      cell.style.position = 'absolute';
      cell.style.left = '0%';
      cell.style.top = '0%';
      cell.style.width = '100%';
      cell.style.height = '100%';
      cell.style.border = '1px solid #6b7280';
      cell.style.backgroundColor = '#e5e7eb';
      previewGrid.appendChild(cell);
      
      // Update preview text
      const typeLabel = type.charAt(0).toUpperCase() + type.slice(1);
      previewText.textContent = `1x1 ${typeLabel} Grid (User configurable)`;
    }

    // Step navigation
    function setupStepNavigation() {
      try {
        // Step 1 to Step 2
        const toStep2Btn = document.getElementById('to-step2-btn');
        if (toStep2Btn) {
          toStep2Btn.addEventListener('click', function() {
            console.log('Step 2 button clicked');
            const windowType = document.getElementById('type').value;
            console.log('Window type value:', windowType);
            if (!windowType) {
              showAlert('Please enter a window type before proceeding.');
              return;
            }
            console.log('Calling goToStep(2)');
            goToStep(2);
          });
        }
        
        // Step 2 to Step 1
        const backToStep1Btn = document.getElementById('back-to-step1-btn');
        if (backToStep1Btn) {
          backToStep1Btn.addEventListener('click', function() {
            goToStep(1);
          });
        }
        
        // Step 2 to Step 3
        const toStep3Btn = document.getElementById('to-step3-btn');
        if (toStep3Btn) {
          toStep3Btn.addEventListener('click', function() {
            if (profiles.length === 0) {
              showAlert('Please add at least one profile before proceeding.');
              return;
            }
            goToStep(3);
          });
        }
        
        // Step 3 to Step 2
        const backToStep2Btn = document.getElementById('back-to-step2-btn');
        if (backToStep2Btn) {
          backToStep2Btn.addEventListener('click', function() {
            goToStep(2);
          });
        }
        
        // Step 3 to Step 4
        const toStep4Btn = document.getElementById('to-step4-btn');
        if (toStep4Btn) {
          toStep4Btn.addEventListener('click', function() {
            goToStep(4);
          });
        }
        
        // Step 4 to Step 3
        const backToStep3Btn = document.getElementById('back-to-step3-btn');
        if (backToStep3Btn) {
          backToStep3Btn.addEventListener('click', function() {
            goToStep(3);
          });
        }
        
        // Step 4 to Step 5
        const toStep5Btn = document.getElementById('to-step5-btn');
        if (toStep5Btn) {
          toStep5Btn.addEventListener('click', function() {
            goToStep(5);
          });
        }
        
        // Step 5 to Step 4
        const backToStep4Btn = document.getElementById('back-to-step4-btn');
        if (backToStep4Btn) {
          backToStep4Btn.addEventListener('click', function() {
            goToStep(4);
          });
        }
      } catch (error) {
        console.error('Error in setupStepNavigation:', error);
      }
    }
    
    function goToStep(step) {
      console.log('goToStep called with step:', step);
      
      // Simple approach: hide all, show only current
      document.getElementById('step1-section').style.display = 'none';
      document.getElementById('step2-section').style.display = 'none';
      document.getElementById('step3-section').style.display = 'none';
      document.getElementById('step4-section').style.display = 'none';
      document.getElementById('step5-section').style.display = 'none';
      
      // Show only the current step
      const currentSection = document.getElementById(`step${step}-section`);
      if (currentSection) {
        console.log(`Showing step ${step}`);
        currentSection.style.display = 'block';
      }
      
      // Update step indicators
      for (let i = 1; i <= 5; i++) {
        const indicator = document.getElementById(`step${i}-indicator`);
        if (indicator) {
          if (i < step) {
            indicator.classList.remove('step-inactive', 'step-active');
            indicator.classList.add('step-complete');
          } else if (i === step) {
            indicator.classList.remove('step-inactive', 'step-complete');
            indicator.classList.add('step-active');
          } else {
            indicator.classList.remove('step-active', 'step-complete');
            indicator.classList.add('step-inactive');
          }
        }
      }
      
      currentStep = step;
      
      // Scroll to the current step
      if (currentSection) {
        currentSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    }
    
    // Show alert message
    function showAlert(message) {
      const alertDiv = document.createElement('div');
      alertDiv.className = 'fixed top-4 right-4 bg-red-500 text-white px-6 py-3 rounded shadow-lg z-50 animate-bounce';
      alertDiv.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>${message}`;
      document.body.appendChild(alertDiv);
      
      setTimeout(() => {
        alertDiv.remove();
      }, 3000);
    }
    
    // Update empty state messages
    function updateEmptyStates() {
      try {
        // Profiles
        const profilesEmpty = document.getElementById('profiles-empty-state');
        if (profilesEmpty) {
          if (profiles.length > 0) {
            profilesEmpty.style.display = 'none';
          } else {
            profilesEmpty.style.display = 'block';
          }
        }
        
        // Accessories
        const accessoriesEmpty = document.getElementById('accessories-empty-state');
        if (accessoriesEmpty) {
          if (accessories.length > 0) {
            accessoriesEmpty.style.display = 'none';
          } else {
            accessoriesEmpty.style.display = 'block';
          }
        }
        
        // Glass Restrictions
        const glassEmpty = document.getElementById('glass-restrictions-empty-state');
        if (glassEmpty) {
          if (glassRestrictions.length > 0) {
            glassEmpty.style.display = 'none';
          } else {
            glassEmpty.style.display = 'block';
          }
        }
      } catch (error) {
        console.error('Error in updateEmptyStates:', error);
      }
    }

    // Profile functions
    function addProfileEntry() {
      const profileSelect = document.getElementById('profile-id');
      const profileId = profileSelect.value;
      const profileName = profileSelect.options[profileSelect.selectedIndex]?.text || '';
      const quantity = document.getElementById('profile-quantity').value;
      const orientation = document.getElementById('profile-orientation').value;
      const lengthDiscount = document.getElementById('profile-length-discount').value;
      const showToUser = document.getElementById('profile-show-to-user').checked;

      if (!profileId) {
        showAlert('Please select a profile');
        return;
      }
      
      if (!quantity || quantity <= 0) {
        showAlert('Please enter a valid quantity');
        return;
      }
      
      if (!orientation) {
        showAlert('Please select an orientation');
        return;
      }
      
      if (!lengthDiscount && lengthDiscount !== 0) {
        showAlert('Please enter a length discount');
        return;
      }

      profiles.push({ profileId, profileName, quantity, orientation, lengthDiscount, showToUser });
      renderProfilesTable();
      
      // Reset form inputs
      profileSelect.selectedIndex = 0;
      document.getElementById('profile-quantity').value = '';
      document.getElementById('profile-orientation').selectedIndex = 0;
      document.getElementById('profile-length-discount').value = '';
      document.getElementById('profile-show-to-user').checked = false;
      
      updateEmptyStates();
    }

    function renderProfilesTable() {
      const tableBody = document.getElementById('profiles-table-body');
      tableBody.innerHTML = '';
      profiles.forEach((profile, index) => {
        const userConfigStatus = profile.showToUser ? 
          '<span class="bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full">User Configurable</span>' : 
          '<span class="bg-gray-100 text-gray-600 text-xs px-2 py-1 rounded-full">Auto-managed</span>';
        
        const row = `
          <tr class="${index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}">
            <td class="py-3 px-4 border-b">${profile.profileName}</td>
            <td class="py-3 px-4 border-b">${profile.quantity}</td>
            <td class="py-3 px-4 border-b">${profile.orientation}</td>
            <td class="py-3 px-4 border-b">${profile.lengthDiscount} in.</td>
            <td class="py-3 px-4 border-b">${userConfigStatus}</td>
            <td class="py-3 px-4 border-b">
              <button type="button" class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm transition duration-200" onclick="removeProfile(${index})">
                <i class="fas fa-trash mr-1"></i>Remove
              </button>
            </td>
          </tr>
        `;
        tableBody.insertAdjacentHTML('beforeend', row);
      });
    }

    function removeProfile(index) {
      profiles.splice(index, 1);
      renderProfilesTable();
      updateEmptyStates();
    }

    // Accessory functions
    function addAccessoryEntry() {
      const accessorySelect = document.getElementById('accessory-id');
      const accessoryId = accessorySelect.value;
      const accessoryName = accessorySelect.options[accessorySelect.selectedIndex]?.text || '';
      const quantity = document.getElementById('accessory-quantity').value;
      const unit = document.getElementById('accessory-unit').value;
      const showToUser = document.getElementById('accessory-show-to-user').checked;
      
      // Get advanced configuration fields
      const componentGroup = document.getElementById('accessory-component-group').value;
      const selectionType = document.getElementById('accessory-selection-type').value;
      const isDefault = document.getElementById('accessory-is-default').checked;

      if (!accessoryId) {
        showAlert('Please select an accessory');
        return;
      }
      
      if (!quantity || quantity <= 0) {
        showAlert('Please enter a valid quantity');
        return;
      }

      accessories.push({ 
        accessoryId, 
        accessoryName, 
        quantity, 
        unit, 
        showToUser,
        componentGroup: componentGroup || null,
        selectionType,
        isDefault
      });
      renderAccessoriesTable();
      
      // Reset form inputs
      accessorySelect.selectedIndex = 0;
      document.getElementById('accessory-quantity').value = '';
      document.getElementById('accessory-unit').value = '';
      document.getElementById('accessory-show-to-user').checked = false;
      document.getElementById('accessory-component-group-select').value = '';
      document.getElementById('accessory-component-group-custom').style.display = 'none';
      document.getElementById('accessory-component-group-custom').value = '';
      document.getElementById('accessory-component-group').value = '';
      document.getElementById('accessory-selection-type').value = 'quantity';
      document.getElementById('accessory-is-default').checked = false;
      
      // Hide advanced config
      document.getElementById('accessory-advanced-config').style.display = 'none';
      
      updateEmptyStates();
    }

    function renderAccessoriesTable() {
      const tableBody = document.getElementById('accessories-table-body');
      tableBody.innerHTML = '';
      accessories.forEach((accessory, index) => {
        const userConfigStatus = accessory.showToUser ? 
          '<span class="bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full">User Configurable</span>' : 
          '<span class="bg-gray-100 text-gray-600 text-xs px-2 py-1 rounded-full">Auto-managed</span>';
        
        // Choice group information
        let choiceGroupInfo = '<span class="text-gray-400">-</span>';
        if (accessory.showToUser && accessory.componentGroup) {
          const selectionTypeLabel = {
            'single': 'Single Choice',
            'multiple': 'Multiple Choice', 
            'quantity': 'Quantity'
          }[accessory.selectionType] || 'Quantity';
          
          const defaultMarker = accessory.isDefault ? ' ⭐' : '';
          choiceGroupInfo = `
            <div class="text-sm">
              <strong>${accessory.componentGroup}</strong><br>
              <span class="text-xs text-gray-600">${selectionTypeLabel}${defaultMarker}</span>
            </div>
          `;
        }
        
        const row = `
          <tr class="${index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}">
            <td class="py-3 px-4 border-b">${accessory.accessoryName}</td>
            <td class="py-3 px-4 border-b">${accessory.quantity}</td>
            <td class="py-3 px-4 border-b">${accessory.unit}</td>
            <td class="py-3 px-4 border-b">${userConfigStatus}</td>
            <td class="py-3 px-4 border-b">${choiceGroupInfo}</td>
            <td class="py-3 px-4 border-b">
              <button type="button" class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm transition duration-200" onclick="removeAccessory(${index})">
                <i class="fas fa-trash mr-1"></i>Remove
              </button>
            </td>
          </tr>
        `;
        tableBody.insertAdjacentHTML('beforeend', row);
      });
    }

    function removeAccessory(index) {
      accessories.splice(index, 1);
      renderAccessoriesTable();
      updateEmptyStates();
    }

    // Glass restriction functions
    function addGlassRestriction() {
      const type = document.getElementById('glass-type').value;
      const width = document.getElementById('glass-width').value;
      const height = document.getElementById('glass-height').value;
      const positivePressure = document.getElementById('glass-positive-pressure').value;
      const negativePressure = document.getElementById('glass-negative-pressure').value;

      if (!type) {
        showAlert('Please select a glass type');
        return;
      }
      
      if (!width || width <= 0) {
        showAlert('Please enter a valid width');
        return;
      }
      
      if (!height || height <= 0) {
        showAlert('Please enter a valid height');
        return;
      }
      
      if (!positivePressure && positivePressure !== 0) {
        showAlert('Please enter a positive pressure value');
        return;
      }
      
      if (!negativePressure && negativePressure !== 0) {
        showAlert('Please enter a negative pressure value');
        return;
      }

      glassRestrictions.push({ type, width, height, positivePressure, negativePressure });
      renderGlassRestrictionsTable();
      
      // Reset form inputs
      document.getElementById('glass-type').selectedIndex = 0;
      document.getElementById('glass-width').value = '';
      document.getElementById('glass-height').value = '';
      document.getElementById('glass-positive-pressure').value = '';
      document.getElementById('glass-negative-pressure').value = '';
      
      updateEmptyStates();
    }

    function renderGlassRestrictionsTable() {
      const tableBody = document.getElementById('glass-restrictions-table-body');
      tableBody.innerHTML = '';
      glassRestrictions.forEach((glass, index) => {
        const row = `
          <tr class="${index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}">
            <td class="py-3 px-4 border-b">${glass.type}</td>
            <td class="py-3 px-4 border-b">${glass.width}</td>
            <td class="py-3 px-4 border-b">${glass.height}</td>
            <td class="py-3 px-4 border-b">${glass.positivePressure}</td>
            <td class="py-3 px-4 border-b">${glass.negativePressure}</td>
            <td class="py-3 px-4 border-b">
              <button type="button" class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm transition duration-200" onclick="removeGlassRestriction(${index})">
                <i class="fas fa-trash mr-1"></i>Remove
              </button>
            </td>
          </tr>
        `;
        tableBody.insertAdjacentHTML('beforeend', row);
      });
    }

    function removeGlassRestriction(index) {
      glassRestrictions.splice(index, 1);
      renderGlassRestrictionsTable();
      updateEmptyStates();
    }

    // Attach event listeners and ensure correct data is sent on form submission
    document.getElementById('accessory-id').addEventListener('change', function() {
      const selectedOption = this.options[this.selectedIndex];
      if (selectedOption && selectedOption.getAttribute('data-unit')) {
        const unit = selectedOption.getAttribute('data-unit');
        document.getElementById('accessory-unit').value = unit || '';
      } else {
        document.getElementById('accessory-unit').value = '';
      }
    });

    // Add event listeners for muntin configuration
    document.addEventListener('DOMContentLoaded', function() {
      // Muntin profile selection
      const muntinProfileSelect = document.getElementById('muntin-profile');
      if (muntinProfileSelect) {
        muntinProfileSelect.addEventListener('change', function() {
          const selectedOption = this.options[this.selectedIndex];
          if (selectedOption && selectedOption.value) {
            muntinConfiguration.muntinProfile = selectedOption.value;
            const muntinType = selectedOption.getAttribute('data-type');
            if (muntinType) {
              document.getElementById('muntin-type').value = muntinType;
              muntinConfiguration.muntinType = muntinType;
            }
          }
        });
      }
      
      // Muntin configuration change listeners
      const muntinTypeField = document.getElementById('muntin-type');
      if (muntinTypeField) {
        muntinTypeField.addEventListener('change', function() {
          updateMuntinConfiguration();
          updateMuntinPreview();
        });
      }
      
      // Muntin checkbox
      const muntinShowToUser = document.getElementById('muntin-show-to-user');
      if (muntinShowToUser) {
        muntinShowToUser.addEventListener('change', function() {
          muntinConfiguration.showToUser = this.checked;
        });
      }
    });

    function updateMuntinConfiguration() {
      const type = document.getElementById('muntin-type').value;
      const showToUser = document.getElementById('muntin-show-to-user').checked;
      
      muntinConfiguration.muntinType = type;
      muntinConfiguration.showToUser = showToUser;
    }

    document.getElementById('window-form').addEventListener('submit', function(event) {
      event.preventDefault();
      
      // Validate form
      const windowType = document.getElementById('type').value;
      if (!windowType) {
        showAlert('Please enter a window type');
        goToStep(1);
        return;
      }
      
      if (profiles.length === 0) {
        showAlert('Please add at least one profile');
        goToStep(2);
        return;
      }
      
      if (glassRestrictions.length === 0) {
        showAlert('Please add at least one glass restriction');
        goToStep(5);
        return;
      }
      
      // Update muntin configuration before submission
      updateMuntinConfiguration();
      
      // Add hidden fields
      const form = event.target;
      
      // Clear existing hidden inputs if any
      const existingInputs = form.querySelectorAll('input[type="hidden"]');
      existingInputs.forEach(input => {
        if (['profiles', 'accessories', 'glassRestrictions', 'muntinConfiguration'].includes(input.name)) {
          input.remove();
        }
      });
      
      const profilesInput = document.createElement('input');
      profilesInput.type = 'hidden';
      profilesInput.name = 'profiles';
      profilesInput.value = JSON.stringify(profiles);
      form.appendChild(profilesInput);

      const accessoriesInput = document.createElement('input');
      accessoriesInput.type = 'hidden';
      accessoriesInput.name = 'accessories';
      accessoriesInput.value = JSON.stringify(accessories);
      form.appendChild(accessoriesInput);

      const glassRestrictionsInput = document.createElement('input');
      glassRestrictionsInput.type = 'hidden';
      glassRestrictionsInput.name = 'glassRestrictions';
      glassRestrictionsInput.value = JSON.stringify(glassRestrictions);
      form.appendChild(glassRestrictionsInput);
      
      const muntinConfigurationInput = document.createElement('input');
      muntinConfigurationInput.type = 'hidden';
      muntinConfigurationInput.name = 'muntinConfiguration';
      muntinConfigurationInput.value = JSON.stringify(muntinConfiguration);
      form.appendChild(muntinConfigurationInput);
      
      // Submit the form
      form.submit();
    });


  </script>
</body>
</html>

