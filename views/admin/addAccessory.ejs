<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../partials/_head.ejs') %>
  <title>Add New Accessory</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    .form-input {
      width: 100%;
      padding: 0.625rem 1rem;
      padding-left: 2.5rem;
      border-radius: 0.375rem;
      border: 1px solid #d1d5db;
      background-color: white;
      color: #111827;
      transition: all 0.2s;
    }
    .form-input:focus {
      outline: none;
      border-color: #3b82f6;
      box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5);
    }
    .form-input:hover {
      border-color: #60a5fa;
    }
    input[type="text"], input[type="number"], select {
      background-color: #eff6ff;
      border-color: #bfdbfe;
      padding: 0.75rem 1rem;
      padding-left: 2.5rem;
    }
    input[type="text"]:hover, input[type="number"]:hover, select:hover {
      border-color: #93c5fd;
    }
    input[type="text"]:focus, input[type="number"]:focus, select:focus {
      background-color: white;
      border-color: #3b82f6;
      box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.1);
      transform: scale(1.01);
    }
    select {
      appearance: none;
      background-color: #eff6ff;
      cursor: pointer;
      padding-left: 2.5rem;
      padding-right: 2rem;
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%232563EB'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M19 9l-7 7-7-7'%3E%3C/path%3E%3C/svg%3E");
      background-repeat: no-repeat;
      background-position: right 0.5rem center;
      background-size: 1.5em 1.5em;
    }
    .input-with-icon {
      position: relative;
      width: 100%;
    }
    .input-icon {
      position: absolute;
      left: 0.75rem;
      top: 50%;
      transform: translateY(-50%);
      color: #3b82f6;
      pointer-events: none;
      z-index: 10;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .input-icon svg {
      width: 1.25rem;
      height: 1.25rem;
    }
    .form-label {
      display: block;
      font-size: 0.875rem;
      font-weight: 500;
      color: #374151;
      margin-bottom: 0.25rem;
    }
    .required-field {
      color: #ef4444;
      margin-left: 0.25rem;
      font-size: 1.125rem;
      line-height: 1;
      position: relative;
      top: 3px;
    }
    .form-help-text {
      font-size: 0.75rem;
      color: #6b7280;
      margin-top: 0.25rem;
    }
    .error-message {
      color: #dc2626;
      font-size: 0.875rem;
      margin-top: 0.25rem;
      display: none;
    }
    .btn-primary {
      background: linear-gradient(to right, #2563eb, #3b82f6);
      color: white;
      font-weight: 500;
      padding: 0.625rem 1.5rem;
      border-radius: 0.375rem;
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
      transition: all 0.3s ease-in-out;
    }
    .btn-primary:hover {
      background: linear-gradient(to right, #1d4ed8, #2563eb);
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      transform: translateY(-0.5px);
    }
    .btn-secondary {
      background: linear-gradient(to right, #4b5563, #6b7280);
      color: white;
      font-weight: 500;
      padding: 0.625rem 1.5rem;
      border-radius: 0.375rem;
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
      transition: all 0.3s ease-in-out;
    }
    .btn-secondary:hover {
      background: linear-gradient(to right, #374151, #4b5563);
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      transform: translateY(-0.5px);
    }
    .input-group {
      position: relative;
    }
    .input-group-text {
      position: absolute;
      right: 0;
      top: 0;
      height: 100%;
      padding: 0 0.75rem;
      display: flex;
      align-items: center;
      background-color: #dbeafe;
      color: #1e40af;
      font-weight: 500;
      border: 1px solid #bfdbfe;
      border-left: none;
      border-top-right-radius: 0.375rem;
      border-bottom-right-radius: 0.375rem;
      transition: all 0.2s;
    }
    input:focus + .input-group-text {
      border-color: #3b82f6;
      background-color: #bfdbfe;
      color: #1e40af;
    }
    .form-section {
      border-bottom: 1px solid #e5e7eb;
      padding-bottom: 1.25rem;
      margin-bottom: 1.25rem;
    }
    .form-section:last-child {
      border-bottom: none;
      padding-bottom: 0;
      margin-bottom: 0;
    }
    .form-card {
      background-color: white;
      border-radius: 0.5rem;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      transition: all 0.3s;
    }
    .form-card:hover {
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .tooltip {
      position: relative;
      display: inline-block;
      margin-left: 0.5rem;
    }
    .tooltip .tooltip-text {
      visibility: hidden;
      position: absolute;
      z-index: 10;
      width: 15rem;
      background-color: #1f2937;
      color: white;
      font-size: 0.75rem;
      border-radius: 0.375rem;
      padding: 0.5rem;
      margin-left: -7rem;
      margin-top: 0.5rem;
      bottom: 100%;
      opacity: 0;
      transition: opacity 0.3s;
    }
    .tooltip:hover .tooltip-text {
      visibility: visible;
      opacity: 1;
    }
    .tooltip .tooltip-text::after {
      content: " ";
      position: absolute;
      top: 100%;
      left: 50%;
      margin-left: -0.25rem;
      border-width: 0.25rem;
      border-style: solid;
      border-color: #1f2937 transparent transparent transparent;
    }
    .switch {
      position: relative;
      display: inline-block;
      width: 2.75rem;
      height: 1.5rem;
    }
    .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }
    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #d1d5db;
      transition: all 0.3s;
      border-radius: 9999px;
    }
    .slider:before {
      content: "";
      position: absolute;
      left: 0.25rem;
      bottom: 0.25rem;
      background-color: white;
      width: 1rem;
      height: 1rem;
      transition: all 0.3s;
      border-radius: 9999px;
    }
    input:checked + .slider {
      background-color: #2563eb;
    }
    input:focus + .slider {
      box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5);
    }
    input:checked + .slider:before {
      transform: translateX(1.25rem);
    }
  </style>
</head>
<body class="bg-gray-50 min-h-screen flex flex-col">
  <%- include('../partials/_header.ejs') %>

  <main class="flex-grow container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-6">
      <div>
        <h1 class="text-3xl font-bold flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mr-3 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
          </svg>
          <span class="bg-clip-text text-transparent bg-gradient-to-r from-blue-600 via-indigo-500 to-purple-600">
            Add New Accessory
          </span>
        </h1>
        <p class="text-gray-600 mt-1 ml-11">Create a new window system accessory item</p>
      </div>
      <a href="/admin/accessories" class="btn-secondary flex items-center text-sm">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
        Back to Accessories
      </a>
    </div>

    <div class="max-w-3xl mx-auto">
      <div class="form-card">
        <form id="createAccessoryForm" action="/admin/accessories/add" method="POST" enctype="multipart/form-data" class="space-y-6">
          <!-- Name field -->
          <div class="form-section">
            <label for="name" class="form-label flex items-center">
              <span class="text-blue-600 font-semibold">Accessory Name</span> 
              <span class="required-field">*</span>
              <div class="tooltip">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span class="tooltip-text">Enter a unique identifier for the accessory. Use descriptive names without spaces.</span>
              </div>
            </label>
            <div class="mt-1 input-with-icon">
              <div class="input-icon">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <input type="text" id="name" name="name" required class="form-input w-full" 
                  placeholder="Enter accessory name (no spaces)" maxlength="50" autocomplete="off">
            </div>
            <div id="nameError" class="error-message">Accessory name cannot contain spaces.</div>
            <p class="form-help-text">Example: WindowHinge, CornerJoint, WeatherSeal (no spaces allowed)</p>
          </div>
          
          <!-- Reference Number field -->
          <div class="form-section">
            <label for="referenceNumber" class="form-label flex items-center">
              <span class="text-indigo-600 font-semibold">Reference Number</span>
              <span class="required-field">*</span>
              <div class="tooltip">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span class="tooltip-text">Enter a unique reference number to identify this accessory.</span>
              </div>
            </label>
            <div class="input-with-icon">
              <div class="input-icon">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 20l4-16m2 16l4-16M6 9h14M4 15h14" />
                </svg>
              </div>
              <input type="text" id="referenceNumber" name="referenceNumber" required class="form-input w-full" 
                  placeholder="Enter reference number" maxlength="50" autocomplete="off">
            </div>
            <div id="referenceNumberError" class="error-message">Reference number is required.</div>
            <p class="form-help-text">Example: ACC-001, WIN-HINGE-23, etc.</p>
          </div>
          
          <!-- Provider Name field -->
          <div class="form-section">
            <label for="providerName" class="form-label flex items-center">
              <span class="text-purple-600 font-semibold">Provider Company</span>
              <div class="tooltip">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span class="tooltip-text">Enter the name of the company that provides this accessory.</span>
              </div>
            </label>
            <div class="input-with-icon">
              <div class="input-icon">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                </svg>
              </div>
              <input type="text" id="providerName" name="providerName" class="form-input w-full" 
                  placeholder="Enter provider company name (optional)" maxlength="100" autocomplete="off">
            </div>
            <p class="form-help-text">Name of the supplier or manufacturer (optional)</p>
          </div>
          
          <!-- Unit field -->
          <div class="form-section">
            <label for="unit" class="form-label">
              <span class="text-sky-600 font-semibold">Unit Type</span>
              <span class="required-field">*</span>
            </label>
            <div class="flex">
              <div class="w-3/4 pr-2">
                <select id="unit" name="unit" required class="form-input w-full">
                  <option value="">-- Select Unit Type --</option>
                  <option value="piece">Piece</option>
                  <option value="meter">Meter</option>
                  <option value="set">Set</option>
                  <option value="pair">Pair</option>
                  <option value="kit">Kit</option>
                  <option value="roll">Roll</option>
                  <option value="sheet">Sheet</option>
                  <option value="custom">Custom Unit...</option>
                </select>
              </div>
              <div id="customUnitContainer" class="w-1/4 pl-2 hidden">
                <input type="text" id="customUnit" name="customUnit" class="form-input w-full" placeholder="Enter custom unit">
              </div>
            </div>
            <p class="form-help-text">The unit type determines how this accessory is measured or sold</p>
          </div>
          
          <!-- Price field -->
          <div class="form-section">
            <label for="price" class="form-label">
              <span class="text-emerald-600 font-semibold">Price Per Unit</span>
              <span class="required-field">*</span>
            </label>
            <div class="grid grid-cols-2 gap-4">
              <div class="flex items-center">
                <div class="input-with-icon w-full">
                  <div class="input-icon">
                    <span class="text-blue-500 font-medium">$</span>
                  </div>
                  <input type="number" id="price" name="price" step="0.01" min="0" required 
                      class="form-input w-full" placeholder="0.00">
                </div>
              </div>
              <div class="flex items-center">
                <select id="currency" name="currency" required class="form-input w-full">
                  <option value="COP">COP (Colombian Peso)</option>
                  <option value="USD">USD (US Dollar)</option>
                </select>
              </div>
            </div>
            <div id="priceError" class="error-message">Price must be a positive number.</div>
            <p class="form-help-text">Enter the price and select the currency</p>
          </div>
          
          <!-- Weight field -->
          <div class="form-section">
            <label for="weight" class="form-label">
              <span class="text-amber-600 font-semibold">Weight (Optional)</span>
            </label>
            <div class="input-with-icon">
              <div class="input-icon">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 6l3 1m0 0l-3 9a5.002 5.002 0 006.001 0M6 7l3 9M6 7l6-2m6 2l3-1m-3 1l-3 9a5.002 5.002 0 006.001 0M18 7l3 9m-3-9l-6-2M6 5v2m12-2v2" />
                </svg>
              </div>
              <input type="number" id="weight" name="weight" step="0.01" min="0" class="form-input w-full pr-14" placeholder="0.00">
              <div class="input-group-text">kg</div>
            </div>
            <div id="weightError" class="error-message">Weight must be a positive number.</div>
            <p class="form-help-text">Leave empty if weight is not applicable or unknown</p>
          </div>
          
          <!-- Image Upload field -->
          <div class="form-section">
            <label for="image" class="form-label flex items-center">
              <span class="text-pink-600 font-semibold">Accessory Image (Optional)</span>
              <div class="tooltip">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span class="tooltip-text">Upload an image to help users identify this accessory when selecting it</span>
              </div>
            </label>
            <div class="mt-1">
              <div id="imageUploadArea" class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-blue-400 transition-colors cursor-pointer">
                <input type="file" id="image" name="image" accept="image/*" class="hidden">
                <div id="uploadPrompt">
                  <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                    <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                  </svg>
                  <div class="mt-4">
                    <p class="text-sm text-gray-600">
                      <span class="font-medium text-blue-600 hover:text-blue-500 cursor-pointer">Click to upload</span> or drag and drop
                    </p>
                    <p class="text-xs text-gray-500">PNG, JPG, JPEG up to 5MB</p>
                  </div>
                </div>
                <div id="imagePreview" class="hidden">
                  <img id="previewImg" src="" alt="Preview" class="mx-auto max-h-32 rounded-lg shadow-md">
                  <p id="fileName" class="mt-2 text-sm text-gray-600"></p>
                  <button type="button" id="removeImage" class="mt-2 text-red-600 hover:text-red-800 text-sm">
                    <svg class="inline h-4 w-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                    </svg>
                    Remove image
                  </button>
                </div>
              </div>
            </div>
            <p class="form-help-text">Adding an image helps users visually identify the accessory when configuring windows</p>
          </div>
          
          <!-- Action Buttons -->
          <div class="flex justify-end space-x-4 pt-6 mt-6 border-t border-gray-100">
            <a href="/admin/accessories" class="btn-secondary">Cancel</a>
            <button type="button" id="submitBtn" class="btn-primary flex items-center shadow-md">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
              </svg>
              Create Accessory
            </button>
          </div>
        </form>
      </div>
      
      <!-- Accessory Types Suggestion Box -->
      <div class="bg-blue-50 border border-blue-100 rounded-lg p-6">
        <h3 class="text-lg font-semibold text-blue-900 mb-3 flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          Common Accessory Types
        </h3>
        <p class="text-blue-800 mb-4">Here are some suggestions for common window accessory types:</p>
        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
          <div class="bg-white p-3 rounded shadow-sm hover:shadow-md transition-shadow cursor-pointer hover:bg-blue-50" onclick="prefillForm('LockingHandle', 'piece', 55000, 0.25)">
            <span class="font-medium">Hardware</span>: Handles, locks, hinges, operators
          </div>
          <div class="bg-white p-3 rounded shadow-sm hover:shadow-md transition-shadow cursor-pointer hover:bg-blue-50" onclick="prefillForm('WeatherStripSeal', 'meter', 15000, 0.1)">
            <span class="font-medium">Weatherstripping</span>: Seals, gaskets, caulking
          </div>
          <div class="bg-white p-3 rounded shadow-sm hover:shadow-md transition-shadow cursor-pointer hover:bg-blue-50" onclick="prefillForm('WindowTrim', 'set', 120000, 1.5)">
            <span class="font-medium">Finishing</span>: Trims, caps, covers, sills
          </div>
          <div class="bg-white p-3 rounded shadow-sm hover:shadow-md transition-shadow cursor-pointer hover:bg-blue-50" onclick="prefillForm('ExtensionJamb', 'piece', 85000, 2.3)">
            <span class="font-medium">Extension Jambs</span>: Side, head, sill jambs
          </div>
          <div class="bg-white p-3 rounded shadow-sm hover:shadow-md transition-shadow cursor-pointer hover:bg-blue-50" onclick="prefillForm('ScreenMesh', 'roll', 150000, 0.75)">
            <span class="font-medium">Screens</span>: Mesh, frame, fasteners
          </div>
          <div class="bg-white p-3 rounded shadow-sm hover:shadow-md transition-shadow cursor-pointer hover:bg-blue-50" onclick="prefillForm('InstallationKit', 'kit', 65000, 0.5)">
            <span class="font-medium">Installation</span>: Screws, shims, flashing
          </div>
        </div>
        <p class="text-xs text-blue-700 mt-4">Click on any category to quickly prefill the form with example values (prices in COP)</p>
      </div>
    </div>
  </main>
  
  <%- include('../partials/_footer.ejs') %>
  
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const nameInput = document.getElementById('name');
      const nameError = document.getElementById('nameError');
      const priceInput = document.getElementById('price');
      const priceError = document.getElementById('priceError');
      const weightInput = document.getElementById('weight');
      const weightError = document.getElementById('weightError');
      const unitSelect = document.getElementById('unit');
      const customUnitContainer = document.getElementById('customUnitContainer');
      const customUnitInput = document.getElementById('customUnit');
      const form = document.getElementById('createAccessoryForm');
      const submitBtn = document.getElementById('submitBtn');
      const referenceNumberInput = document.getElementById('referenceNumber');
      const referenceNumberError = document.getElementById('referenceNumberError');
      
      // Image upload elements
      const imageInput = document.getElementById('image');
      const imageUploadArea = document.getElementById('imageUploadArea');
      const uploadPrompt = document.getElementById('uploadPrompt');
      const imagePreview = document.getElementById('imagePreview');
      const previewImg = document.getElementById('previewImg');
      const fileName = document.getElementById('fileName');
      const removeImageBtn = document.getElementById('removeImage');
      
      // Debug: Check if image elements are found
      console.log('Image elements found:', {
        imageInput: !!imageInput,
        imageUploadArea: !!imageUploadArea,
        uploadPrompt: !!uploadPrompt,
        imagePreview: !!imagePreview
      });
      
      // Handle custom unit selection
      unitSelect.addEventListener('change', function() {
        if (this.value === 'custom') {
          customUnitContainer.classList.remove('hidden');
          customUnitInput.required = true;
          customUnitInput.focus();
        } else {
          customUnitContainer.classList.add('hidden');
          customUnitInput.required = false;
        }
      });
      
      // Validate name
      nameInput.addEventListener('input', validateName);
      
      // Validate reference number
      referenceNumberInput.addEventListener('input', validateReferenceNumber);
      
      // Validate price
      priceInput.addEventListener('input', validatePrice);
      

      
      // Validate weight
      weightInput.addEventListener('input', validateWeight);
      
      // Image upload handling
      imageUploadArea.addEventListener('click', () => imageInput.click());
      
      imageUploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        imageUploadArea.classList.add('border-blue-400', 'bg-blue-50');
      });
      
      imageUploadArea.addEventListener('dragleave', (e) => {
        e.preventDefault();
        imageUploadArea.classList.remove('border-blue-400', 'bg-blue-50');
      });
      
      imageUploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        imageUploadArea.classList.remove('border-blue-400', 'bg-blue-50');
        const files = e.dataTransfer.files;
        if (files.length > 0) {
          handleImageFile(files[0]);
        }
      });
      
      imageInput.addEventListener('change', (e) => {
        if (e.target.files.length > 0) {
          handleImageFile(e.target.files[0]);
        }
      });
      
      removeImageBtn.addEventListener('click', () => {
        imageInput.value = '';
        uploadPrompt.classList.remove('hidden');
        imagePreview.classList.add('hidden');
        imageUploadArea.classList.remove('border-blue-400');
        imageUploadArea.classList.add('border-gray-300');
      });
      
      function handleImageFile(file) {
        console.log('🖼️ File selected:', file.name, file.size, file.type);
        
        // Validate file type
        if (!file.type.startsWith('image/')) {
          alert('Please select an image file');
          return;
        }
        
        // Validate file size (5MB)
        if (file.size > 5 * 1024 * 1024) {
          alert('Image size must be less than 5MB');
          return;
        }
        
        console.log('✅ File validation passed, creating preview');
        
        // Create preview
        const reader = new FileReader();
        reader.onload = (e) => {
          previewImg.src = e.target.result;
          fileName.textContent = file.name;
          uploadPrompt.classList.add('hidden');
          imagePreview.classList.remove('hidden');
          imageUploadArea.classList.remove('border-gray-300');
          imageUploadArea.classList.add('border-blue-400');
          console.log('✅ Preview created successfully');
        };
        reader.readAsDataURL(file);
      }
      
      // Form submission
      submitBtn.addEventListener('click', function(e) {
        e.preventDefault(); // Prevent any default behavior
        
        console.log('Submit button clicked!');
        
        // Check basic required field values directly
        const nameValue = nameInput.value.trim();
        const refValue = referenceNumberInput.value.trim();
        const priceValue = priceInput.value;
        const unitValue = unitSelect.value;
        
        console.log('Field values:', {
          name: nameValue,
          referenceNumber: refValue,
          price: priceValue,
          unit: unitValue
        });
        
        // Simple validation
        if (!nameValue) {
          alert('Please enter an accessory name');
          nameInput.focus();
          return;
        }
        
        if (!refValue) {
          alert('Please enter a reference number');
          referenceNumberInput.focus();
          return;
        }
        
        if (!priceValue || priceValue <= 0) {
          alert('Please enter a valid price');
          priceInput.focus();
          return;
        }
        
        if (!unitValue) {
          alert('Please select a unit type');
          unitSelect.focus();
          return;
        }
        
        // Check custom unit if selected
        if (unitValue === 'custom' && !customUnitInput.value.trim()) {
          alert('Please enter a custom unit');
          customUnitInput.focus();
          return;
        }
        
        // Debug: Log form data before submission
        const formData = new FormData(form);
        console.log('📝 Form data being submitted:');
        for (let [key, value] of formData.entries()) {
          console.log(key + ':', value);
        }
        
        // Specifically check the image input
        const imageFile = imageInput.files[0];
        console.log('🖼️ Image input status:', {
          hasFiles: imageInput.files.length > 0,
          fileName: imageFile ? imageFile.name : 'No file',
          fileSize: imageFile ? imageFile.size : 0,
          inputValue: imageInput.value
        });
        
        // Show loading state
        submitBtn.innerHTML = '<svg class="animate-spin h-5 w-5 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg> Creating...';
        submitBtn.disabled = true;
        
        // Submit the form
        console.log('Submitting form...');
        form.submit();
      });
      
      function validateName() {
        const name = nameInput.value.trim();
        if (/\s/.test(name)) {
          nameError.textContent = 'Accessory name cannot contain spaces.';
          nameError.classList.remove('hidden');
          nameError.classList.add('block');
          nameInput.classList.add('border-red-500');
          return false;
        } else if (name.length === 0) {
          nameError.textContent = 'Accessory name is required.';
          nameError.classList.remove('hidden');
          nameError.classList.add('block');
          nameInput.classList.add('border-red-500');
          return false;
        } else {
          nameError.classList.remove('block');
          nameError.classList.add('hidden');
          nameInput.classList.remove('border-red-500');
          return true;
        }
      }
      
      function validateReferenceNumber() {
        const refNumber = referenceNumberInput.value.trim();
        if (refNumber.length === 0) {
          referenceNumberError.textContent = 'Reference number is required.';
          referenceNumberError.classList.remove('hidden');
          referenceNumberError.classList.add('block');
          referenceNumberInput.classList.add('border-red-500');
          return false;
        } else {
          referenceNumberError.classList.remove('block');
          referenceNumberError.classList.add('hidden');
          referenceNumberInput.classList.remove('border-red-500');
          return true;
        }
      }
      
      function validatePrice() {
        const price = parseFloat(priceInput.value);
        if (isNaN(price) || price < 0) {
          priceError.classList.remove('hidden');
          priceError.classList.add('block');
          priceInput.classList.add('border-red-500');
          return false;
        } else {
          priceError.classList.remove('block');
          priceError.classList.add('hidden');
          priceInput.classList.remove('border-red-500');
          return true;
        }
      }
      
      function validateWeight() {
        if (weightInput.value.trim() === '') {
          // Weight is optional, so empty is fine
          weightError.classList.remove('block');
          weightError.classList.add('hidden');
          weightInput.classList.remove('border-red-500');
          return true;
        }
        
        const weight = parseFloat(weightInput.value);
        if (isNaN(weight) || weight < 0) {
          weightError.classList.remove('hidden');
          weightError.classList.add('block');
          weightInput.classList.add('border-red-500');
          return false;
        } else {
          weightError.classList.remove('block');
          weightError.classList.add('hidden');
          weightInput.classList.remove('border-red-500');
          return true;
        }
      }
    });
    
    // Function to prefill the form
    function prefillForm(name, unit, price, weight) {
      const nameInput = document.getElementById('name');
      const unitSelect = document.getElementById('unit');
      const priceInput = document.getElementById('price');
      const weightInput = document.getElementById('weight');
      const customUnitContainer = document.getElementById('customUnitContainer');
      const customUnitInput = document.getElementById('customUnit');
      
      // Set values with a small animation
      nameInput.classList.add('ring', 'ring-blue-300');
      setTimeout(() => nameInput.classList.remove('ring', 'ring-blue-300'), 1000);
      nameInput.value = name;
      
      unitSelect.classList.add('ring', 'ring-blue-300');
      setTimeout(() => unitSelect.classList.remove('ring', 'ring-blue-300'), 1000);
      
      // Handle both standard and custom units
      if (['piece', 'set', 'meter', 'roll', 'box', 'pair', 'kit'].includes(unit)) {
        unitSelect.value = unit;
        customUnitContainer.classList.add('hidden');
        customUnitInput.required = false;
      } else {
        unitSelect.value = 'custom';
        customUnitContainer.classList.remove('hidden');
        customUnitInput.value = unit;
        customUnitInput.required = true;
      }
      
      priceInput.classList.add('ring', 'ring-blue-300');
      setTimeout(() => priceInput.classList.remove('ring', 'ring-blue-300'), 1000);
      priceInput.value = price;
      
      weightInput.classList.add('ring', 'ring-blue-300');
      setTimeout(() => weightInput.classList.remove('ring', 'ring-blue-300'), 1000);
      weightInput.value = weight;
    }
  </script>
</body>
</html>
