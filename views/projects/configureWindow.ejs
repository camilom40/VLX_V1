<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Configure Window: <%= windowRef %> - <%= project.projectName %></title>
  <%- include('../partials/_head.ejs') %>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="/css/dashboard.css">
  <style>
    .component-card {
      transition: all 0.2s ease;
    }
    .component-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }
    
    /* Unit Toggle Styling */
    .unit-toggle {
      color: #6b7280;
      background-color: transparent;
    }
    .unit-toggle.active {
      color: #ffffff;
      background-color: #3b82f6;
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }
    .unit-toggle:hover:not(.active) {
      color: #374151;
      background-color: #e5e7eb;
    }
    
    /* Window Preview Styles */
    #windowPreview {
      position: relative;
      background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
      border: 3px solid #475569;
      border-radius: 8px;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06), inset 0 1px 0 rgba(255, 255, 255, 0.1);
    }
    
    .preset-btn {
      transition: all 0.2s ease;
    }
    
    .preset-btn:hover {
      transform: translateY(-1px);
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    
    .preset-btn:active {
      transform: translateY(0);
    }
    
    /* Dimension label styles */
    #widthLabel, #heightLabel {
      font-weight: 500;
      z-index: 10;
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
      #windowPreview {
        max-width: 200px;
        max-height: 150px;
      }
    }
  </style>
</head>

<body class="bg-gray-50 min-h-screen flex flex-col">
  <%- include('../partials/_header.ejs') %>

  <main role="main" class="container mx-auto mt-6 px-4 flex-grow mb-16">
    <!-- Header -->
    <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
      <div class="flex flex-col lg:flex-row justify-between items-start lg:items-center">
        <div>
          <div class="flex items-center space-x-2 mb-2">
            <h2 class="text-2xl font-bold text-gray-800"><%= (typeof isEdit !== 'undefined' && isEdit) ? 'Edit' : 'Configure' %> Window: <span class="text-blue-600"><%= windowRef %></span></h2>
            <span class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full"><%= selectedWindowSystem.type %></span>
          </div>
          <p class="text-gray-600">Project: <span class="font-medium"><%= project.projectName %></span></p>
          <p class="text-sm text-gray-500">Client: <%= project.clientName || 'Not specified' %></p>
        </div>
        
        <div class="mt-4 lg:mt-0 bg-green-50 rounded-lg px-6 py-4 border border-green-100">
          <div class="text-green-800 text-xl font-bold" id="totalPrice">$0.00</div>
          <div class="text-green-600 text-sm">Estimated Total</div>
        </div>
      </div>
    </div>

    <form id="windowConfigForm" action="<%= (typeof isEdit !== 'undefined' && isEdit && existingWindow) ? `/projects/${project._id}/windows/${existingWindow._id}/update` : `/projects/${project._id}/windows/save` %>" method="POST" class="space-y-6">
      <input type="hidden" name="windowRef" value="<%= windowRef %>">
      <input type="hidden" name="windowSystemId" value="<%= selectedWindowSystem._id %>">
      <input type="hidden" id="currentUnit" name="currentUnit" value="inches">
      
      <!-- Edit Mode Notice -->
      <% if (typeof isEdit !== 'undefined' && isEdit) { %>
        <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
          <div class="flex items-start">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-yellow-600 mt-0.5 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.962-.833-2.732 0L4.082 15.5c-.77.833.192 2.5 1.732 2.5z" />
            </svg>
            <div class="text-sm text-yellow-800">
              <p class="font-medium mb-1">Edit Mode:</p>
              <p>Basic dimensions and glass type are pre-filled. For detailed component configurations (profiles, accessories), please review and adjust the default settings as needed. The pricing will update automatically as you make changes.</p>
            </div>
          </div>
        </div>
      <% } %>

      <!-- Basic Specifications -->
      <div class="bg-white rounded-lg shadow-sm p-6">
        <h3 class="text-xl font-semibold text-gray-800 mb-4">Window Specifications</h3>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <!-- Left Column: Dimensions -->
          <div>
            <div class="flex justify-between items-center mb-4">
              <h4 class="text-lg font-medium text-gray-700">Dimensions & Quantity</h4>
              
              <!-- Unit Toggle Switch -->
              <div class="flex items-center space-x-3">
                <span class="text-sm text-gray-600">Units:</span>
                <div class="relative">
                  <div class="flex bg-gray-100 rounded-lg p-1">
                    <button type="button" id="inchesBtn" class="unit-toggle active px-3 py-1 text-sm font-medium rounded-md transition-all" onclick="switchUnits('inches')">
                      Inches
                    </button>
                    <button type="button" id="mmBtn" class="unit-toggle px-3 py-1 text-sm font-medium rounded-md transition-all" onclick="switchUnits('mm')">
                      mm
                    </button>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="space-y-4">
              <div class="grid grid-cols-2 gap-4">
                <div>
                  <label for="width" class="form-label">Width (<span id="widthUnit">in</span>) *</label>
                  <input type="number" id="width" name="width" step="0.01" min="0" required 
                         class="form-input w-full" placeholder="0.00" 
                         value="<%= (typeof isEdit !== 'undefined' && isEdit && existingWindow) ? existingWindow.width : '' %>"
                         onchange="calculatePricing(); updateWindowPreview()">
                </div>
                <div>
                  <label for="height" class="form-label">Height (<span id="heightUnit">in</span>) *</label>
                  <input type="number" id="height" name="height" step="0.01" min="0" required 
                         class="form-input w-full" placeholder="0.00" 
                         value="<%= (typeof isEdit !== 'undefined' && isEdit && existingWindow) ? existingWindow.height : '' %>"
                         onchange="calculatePricing(); updateWindowPreview()">
                </div>
              </div>
              
              <div class="grid grid-cols-2 gap-4">
                <div>
                  <label for="quantity" class="form-label">Quantity *</label>
                  <input type="number" id="quantity" name="quantity" min="1" 
                         value="<%= (typeof isEdit !== 'undefined' && isEdit && existingWindow) ? existingWindow.quantity : '1' %>" required 
                         class="form-input w-full" onchange="calculatePricing()">
                </div>
                <div>
                  <label for="glassType" class="form-label">Glass Type *</label>
                  <select id="glassType" name="glassType" required class="form-input w-full" onchange="calculatePricing()">
                    <option value="">Select Glass Type</option>
                    <% allGlasses.forEach(glass => { %>
                      <% 
                        let isSelected = false;
                        if ((typeof isEdit !== 'undefined' && isEdit) && existingWindow && existingWindow.description) {
                          // Try to match glass type from description
                          isSelected = existingWindow.description.includes(glass.glass_type);
                        }
                      %>
                      <option value="<%= glass._id %>" data-price="<%= glass.pricePerSquareMeter %>" data-type="<%= glass.glass_type %>" <%= isSelected ? 'selected' : '' %>>
                        <%= glass.glass_type %> - <%= glass.description %>
                      </option>
                    <% }) %>
                  </select>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Right Column: System Info -->
          <div>
            <h4 class="text-lg font-medium text-gray-700 mb-4">System Information</h4>
            <div class="bg-gray-50 rounded-lg p-4 space-y-3">
              <div class="flex justify-between">
                <span class="text-gray-600">Window System:</span>
                <span class="font-medium"><%= selectedWindowSystem.type %></span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600">Total Profiles:</span>
                <span class="font-medium"><%= selectedWindowSystem.profiles.length %></span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600">User-Configurable:</span>
                <span class="font-medium text-green-600"><%= userConfigurableProfiles.length %> profiles</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600">Total Accessories:</span>
                <span class="font-medium"><%= selectedWindowSystem.accessories.length %></span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600">User-Configurable:</span>
                <span class="font-medium text-green-600"><%= userConfigurableAccessories.length %> accessories</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600">Glass Restrictions:</span>
                <span class="font-medium"><%= selectedWindowSystem.glassRestrictions ? selectedWindowSystem.glassRestrictions.length : 0 %></span>
              </div>
            </div>
            
            <!-- Glass Restrictions -->
            <% if (selectedWindowSystem.glassRestrictions && selectedWindowSystem.glassRestrictions.length > 0) { %>
              <div class="mt-4 bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                <h5 class="text-sm font-medium text-yellow-800 mb-2">Glass Restrictions:</h5>
                <% selectedWindowSystem.glassRestrictions.forEach(restriction => { %>
                  <div class="text-xs text-yellow-700 mb-2">
                    <strong>Type <%= restriction.type %>:</strong> Max <%= restriction.width %>" × <%= restriction.height %>"
                  </div>
                <% }) %>
              </div>
            <% } %>
          </div>
        </div>
      </div>

      <!-- Window Visual Preview -->
      <div class="bg-white rounded-lg shadow-sm p-6">
        <h3 class="text-xl font-semibold text-gray-800 mb-4">Window Visual Preview</h3>
        
        <div class="flex flex-col items-center">
          <div class="relative bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg p-6 border-2 border-blue-200 min-h-[300px] w-full max-w-md">

            <% if (selectedWindowSystem.image) { %>
              <div class="relative">
                <img src="<%= selectedWindowSystem.image %>" 
                     alt="<%= selectedWindowSystem.type %> Window System" 
                     class="max-w-full h-auto rounded-lg shadow-lg mx-auto my-4 transition-all duration-300 ease-in-out"
                     style="max-height: 250px; object-fit: contain;">
                <div id="dimensionOverlay" class="absolute inset-0 pointer-events-none">
                  <!-- Dimension Labels -->
                  <div id="widthLabel" class="absolute -bottom-8 left-1/2 transform -translate-x-1/2 text-sm font-medium text-gray-700 bg-white px-2 py-1 rounded border shadow-sm">
                    Width: <span id="widthValue">0</span> <span id="widthUnitLabel">in</span>
                  </div>
                  <div id="heightLabel" class="absolute -right-8 top-1/2 transform -translate-y-1/2 text-sm font-medium text-gray-700 bg-white px-2 py-1 rounded border rotate-90 shadow-sm">
                    Height: <span id="heightValue">0</span> <span id="heightUnitLabel">in</span>
                  </div>
                </div>
              </div>
            <% } else { %>
              <!-- Fallback Window Frame (generic preview) -->
              <div id="windowPreview" class="relative bg-white border-4 border-gray-300 rounded-lg shadow-lg mx-auto my-4 transition-all duration-300 ease-in-out" style="width: 200px; height: 150px;">
                <!-- Window Sash -->
                <div class="absolute inset-2 bg-blue-50 border-2 border-blue-200 rounded"></div>
                <!-- Glass Panels -->
                <div class="absolute inset-4 bg-gradient-to-br from-blue-100 to-blue-200 rounded opacity-80"></div>
                <!-- Muntins (if applicable) -->
                <div class="absolute top-1/2 left-0 right-0 h-0.5 bg-gray-400 transform -translate-y-1/2"></div>
                <div class="absolute left-1/2 top-0 bottom-0 w-0.5 bg-gray-400 transform -translate-x-1/2"></div>
                
                <!-- Dimension Labels -->
                <div id="widthLabel" class="absolute -bottom-8 left-1/2 transform -translate-x-1/2 text-sm font-medium text-gray-700 bg-white px-2 py-1 rounded border shadow-sm">
                  Width: <span id="widthValue">0</span> <span id="widthUnitLabel">in</span>
                </div>
                <div id="heightLabel" class="absolute -right-8 top-1/2 transform -translate-y-1/2 text-sm font-medium text-gray-700 bg-white px-2 py-1 rounded border rotate-90 shadow-sm">
                  Height: <span id="heightValue">0</span> <span id="heightUnitLabel">in</span>
                </div>
              </div>
            <% } %>
            
            <!-- Scale Indicator -->
            <div class="text-center text-sm text-gray-600 mt-4">
              <% if (selectedWindowSystem.image) { %>
                <i class="fas fa-image mr-1"></i> Actual Window System Image
              <% } else { %>
                <i class="fas fa-drafting-compass mr-1"></i> Generic Preview (Scale: 1:10)
              <% } %>
            </div>
          </div>
          
          <!-- Dimensions and Calculations -->
          <div class="mt-6 grid grid-cols-2 md:grid-cols-4 gap-4 w-full max-w-md">
            <div class="bg-gray-50 rounded-lg p-3 text-center">
              <div class="text-lg font-bold text-gray-800" id="areaDisplay">0.00</div>
              <div class="text-xs text-gray-600">Area (sq ft)</div>
            </div>
            <div class="bg-gray-50 rounded-lg p-3 text-center">
              <div class="text-lg font-bold text-gray-800" id="perimeterDisplay">0.00</div>
              <div class="text-xs text-gray-600">Perimeter (ft)</div>
            </div>
            <div class="bg-gray-50 rounded-lg p-3 text-center">
              <div class="text-lg font-bold text-gray-800" id="aspectRatioDisplay">0.00</div>
              <div class="text-xs text-gray-600">Aspect Ratio</div>
            </div>
            <div class="bg-gray-50 rounded-lg p-3 text-center">
              <div class="text-lg font-bold text-gray-800" id="glassAreaDisplay">0.00</div>
              <div class="text-xs text-gray-600">Glass Area (sq ft)</div>
            </div>
          </div>
          
          <!-- Quick Size Presets -->
          <div class="mt-4">
            <h5 class="text-sm font-medium text-gray-700 mb-2">Quick Size Presets:</h5>
            <div class="flex flex-wrap gap-2">
              <button type="button" class="preset-btn bg-blue-100 hover:bg-blue-200 text-blue-800 px-3 py-1 rounded text-sm" onclick="setPresetSize(36, 60)">36" × 60"</button>
              <button type="button" class="preset-btn bg-blue-100 hover:bg-blue-200 text-blue-800 px-3 py-1 rounded text-sm" onclick="setPresetSize(48, 72)">48" × 72"</button>
              <button type="button" class="preset-btn bg-blue-100 hover:bg-blue-200 text-blue-800 px-3 py-1 rounded text-sm" onclick="setPresetSize(60, 84)">60" × 84"</button>
              <button type="button" class="preset-btn bg-blue-100 hover:bg-blue-200 text-blue-800 px-3 py-1 rounded text-sm" onclick="setPresetSize(72, 96)">72" × 96"</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Components Configuration -->
      <div class="bg-white rounded-lg shadow-sm p-6">
        <h3 class="text-xl font-semibold text-gray-800 mb-4">Components Configuration</h3>
        
        <!-- Profiles Section -->
        <div class="mb-8">
          <h4 class="text-lg font-medium text-gray-700 mb-4">Profiles (Based on <%= selectedWindowSystem.type %>)</h4>
          
          <div id="profilesContainer" class="space-y-4">
            <% if (userConfigurableProfiles.length > 0) { %>
              <% userConfigurableProfiles.forEach((profileItem, index) => { %>
                <div class="component-card border border-gray-200 rounded-lg p-4">
                  <div class="grid grid-cols-1 md:grid-cols-4 gap-4 items-end">
                    <div>
                      <label class="form-label">Profile</label>
                      <select name="profiles[<%= index %>][profileId]" class="form-input w-full profile-select" onchange="calculatePricing()">
                        <% allProfiles.forEach(profile => { %>
                          <option value="<%= profile._id %>" 
                                  data-price="<%= profile.pricePerMeter %>"
                                  data-weight="<%= profile.weight %>"
                                  <%= profileItem.profile && profileItem.profile._id.toString() === profile._id.toString() ? 'selected' : '' %>>
                            <%= profile.name %> - <%= profile.color %>
                          </option>
                        <% }) %>
                      </select>
                    </div>
                    <div>
                      <label class="form-label">Quantity</label>
                      <input type="number" name="profiles[<%= index %>][quantity]" value="1" 
                             min="1" class="form-input w-full" onchange="calculatePricing()">
                    </div>
                    <div>
                      <label class="form-label">Orientation</label>
                      <select name="profiles[<%= index %>][orientation]" class="form-input w-full">
                        <option value="horizontal" <%= profileItem.orientation === 'horizontal' ? 'selected' : '' %>>Horizontal</option>
                        <option value="vertical" <%= profileItem.orientation === 'vertical' ? 'selected' : '' %>>Vertical</option>
                      </select>
                    </div>
                    <div>
                      <label class="form-label">Length Discount (in)</label>
                      <input type="number" name="profiles[<%= index %>][lengthDiscount]" value="<%= profileItem.lengthDiscount %>" 
                             step="0.01" class="form-input w-full" onchange="calculatePricing()">
                    </div>
                  </div>
                </div>
              <% }) %>
            <% } else { %>
              <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <p class="text-blue-800 text-sm">
                  <i class="fas fa-info-circle mr-2"></i>
                  All profiles for this window system are automatically configured. No user input required.
                </p>
              </div>
            <% } %>
          </div>
        </div>

        <!-- Accessories Section -->
        <div class="mb-8">
          <h4 class="text-lg font-medium text-gray-700 mb-4">Accessories</h4>
          
          <div id="accessoriesContainer" class="space-y-6">
            <% if (accessoryChoiceGroups.length > 0 || individualAccessories.length > 0) { %>
              
              <!-- Choice Groups (e.g., handles, locks) -->
              <% accessoryChoiceGroups.forEach((group, groupIndex) => { %>
                <div class="bg-gray-50 border border-gray-200 rounded-lg p-6">
                  <div class="flex items-center justify-between mb-4">
                    <h5 class="text-lg font-medium text-gray-800 capitalize"><%= group.name %></h5>
                    <span class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">
                      <%= group.selectionType === 'single' ? 'Choose One' : 'Multiple Choice' %>
                    </span>
                  </div>
                  
                  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <% group.accessories.forEach((accessoryItem, accessoryIndex) => { %>
                      <% const accessory = allAccessories.find(a => a._id.toString() === accessoryItem.accessory._id.toString()) %>
                      <% if (accessory) { %>
                                                 <div class="choice-option border border-gray-300 rounded-lg p-4 hover:border-blue-400 hover:bg-blue-50 transition-colors cursor-pointer" 
                              data-group="<%= group.name %>" 
                              data-selection-type="<%= group.selectionType %>" 
                              data-accessory-id="<%= accessoryItem.accessory._id %>"
                              onclick="selectChoice(this)">
                          <div class="flex items-start justify-between">
                            <!-- Image Section -->
                            <% if (accessory.image && accessory.image.trim() !== '') { %>
                              <div class="flex-shrink-0 mr-4">
                                <img src="/uploads/accessories/<%= accessory.image %>" 
                                     alt="<%= accessory.name %>" 
                                     class="w-16 h-16 object-cover rounded-lg shadow-sm border border-gray-200">
                              </div>
                            <% } %>
                            
                            <div class="flex-1">
                              <div class="flex items-center mb-2">
                                <input type="<%= group.selectionType === 'single' ? 'radio' : 'checkbox' %>" 
                                       name="choiceGroup_<%= group.name %>" 
                                       value="<%= accessoryItem.accessory._id %>"
                                       class="mr-2"
                                       <%= accessoryItem.isDefault ? 'checked' : '' %>
                                       onchange="handleChoiceGroupChange(this)">
                                <h6 class="font-medium text-gray-800"><%= accessory.name %></h6>
                                <% if (accessoryItem.isDefault) { %>
                                  <span class="ml-2 text-yellow-500">⭐</span>
                                <% } %>
                              </div>
                              <p class="text-sm text-gray-600 mb-2">
                                <% if (accessory.referenceNumber) { %>
                                  <span class="font-medium">Ref:</span> <%= accessory.referenceNumber %><br>
                                <% } %>
                                <% if (accessory.providerName) { %>
                                  <span class="font-medium">Provider:</span> <%= accessory.providerName %><br>
                                <% } %>
                                <%= accessory.description || 'High-quality window accessory' %>
                              </p>
                              <div class="text-sm font-medium text-green-600">
                                $<%= accessory.price.toFixed(2) %>/<%= accessory.unit %>
                              </div>
                            </div>
                          </div>
                          
                          <div class="mt-3 pt-3 border-t border-gray-200">
                            <label class="block text-xs text-gray-600 mb-1">Quantity:</label>
                            <input type="number" 
                                   name="accessories_choice_<%= group.name %>_<%= accessoryItem.accessory._id %>_quantity" 
                                   value="1" 
                                   min="1" 
                                   class="form-input w-full text-sm" 
                                   onchange="calculatePricing()" 
                                   oninput="calculatePricing()">
                          </div>
                          
                          <!-- Hidden fields to store accessory info -->
                          <input type="hidden" name="accessories_choice_<%= group.name %>_<%= accessoryItem.accessory._id %>_price" value="<%= accessory.price %>">
                          <input type="hidden" name="accessories_choice_<%= group.name %>_<%= accessoryItem.accessory._id %>_unit" value="<%= accessory.unit %>">
                        </div>
                      <% } %>
                    <% }) %>
                  </div>
                </div>
              <% }) %>
              
              <!-- Individual Accessories (quantity-based) -->
              <% if (individualAccessories.length > 0) { %>
                <div class="space-y-4">
                  <h5 class="text-lg font-medium text-gray-700">Additional Accessories</h5>
                  <% individualAccessories.forEach((accessoryItem, index) => { %>
                    <div class="component-card border border-gray-200 rounded-lg p-4">
                      <div class="grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
                        <div>
                          <label class="form-label">Accessory</label>
                          <div class="relative">
                            <select name="accessories[<%= index %>][accessoryId]" class="form-input w-full accessory-select" data-index="<%= index %>" onchange="calculatePricing(); updateAccessoryInfo(this)">
                              <% allAccessories.forEach(accessory => { %>
                                <option value="<%= accessory._id %>" 
                                        data-price="<%= accessory.price %>"
                                        data-unit="<%= accessory.unit %>"
                                        data-image="<%= accessory.image || '' %>"
                                        data-reference="<%= accessory.referenceNumber || '' %>"
                                        data-provider="<%= accessory.providerName || '' %>"
                                        <%= accessoryItem.accessory && accessoryItem.accessory._id.toString() === accessory._id.toString() ? 'selected' : '' %>>
                                  <%= accessory.name %> - $<%= accessory.price %>/<%= accessory.unit %>
                                  <% if (accessory.referenceNumber) { %> (Ref: <%= accessory.referenceNumber %>)<% } %>
                                </option>
                              <% }) %>
                            </select>
                            
                            <!-- Accessory preview -->
                            <div id="accessoryPreview_<%= index %>" class="mt-2 hidden">
                              <div class="flex items-center space-x-3 p-2 bg-gray-50 rounded-lg">
                                <img id="accessoryImage_<%= index %>" src="" alt="" class="w-12 h-12 object-cover rounded border">
                                <div class="text-sm">
                                  <div id="accessoryDetails_<%= index %>" class="text-gray-600"></div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                        <div>
                          <label class="form-label">Quantity</label>
                          <input type="number" name="accessories[<%= index %>][quantity]" value="1" 
                                 min="1" class="form-input w-full" onchange="calculatePricing()">
                        </div>
                        <div>
                          <label class="form-label">Unit</label>
                          <input type="text" name="accessories[<%= index %>][unit]" value="<%= accessoryItem.unit %>" 
                                 class="form-input w-full bg-gray-100" readonly>
                        </div>
                      </div>
                    </div>
                  <% }) %>
                </div>
              <% } %>
              
            <% } else { %>
              <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <p class="text-blue-800 text-sm">
                  <i class="fas fa-info-circle mr-2"></i>
                  All accessories for this window system are automatically configured. No user input required.
                </p>
              </div>
            <% } %>
          </div>
        </div>
      </div>

      <!-- Muntin Configuration Section -->
      <% if (selectedWindowSystem.muntinConfiguration && selectedWindowSystem.muntinConfiguration.enabled) { %>
        <div class="bg-white rounded-lg shadow-sm p-6">
          <h3 class="text-xl font-semibold text-gray-800 mb-4">Muntin Configuration</h3>
          
          <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
            <p class="text-blue-800 text-sm">
              <i class="fas fa-info-circle mr-2"></i>
              Configure ornamental muntins for this window. Muntins are decorative dividers that create multiple panes within a single glass unit.
            </p>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <!-- Muntin Type -->
            <div>
              <label class="form-label">Muntin Type</label>
              <select name="muntinType" id="muntinType" class="form-input w-full" onchange="updateMuntinPreview()">
                <option value="colonial" <%= selectedWindowSystem.muntinConfiguration.muntinType === 'colonial' ? 'selected' : '' %>>Colonial</option>
                <option value="geometric" <%= selectedWindowSystem.muntinConfiguration.muntinType === 'geometric' ? 'selected' : '' %>>Geometric</option>
                <option value="custom" <%= selectedWindowSystem.muntinConfiguration.muntinType === 'custom' ? 'selected' : '' %>>Custom</option>
              </select>
            </div>
            
            <!-- Horizontal Divisions -->
            <div>
              <label class="form-label">Horizontal Divisions</label>
              <input type="number" name="muntinHorizontal" id="muntinHorizontal" 
                     value="<%= selectedWindowSystem.muntinConfiguration.horizontalDivisions %>" 
                     min="1" max="10" class="form-input w-full" onchange="updateMuntinPreview()">
            </div>
            
            <!-- Vertical Divisions -->
            <div>
              <label class="form-label">Vertical Divisions</label>
              <input type="number" name="muntinVertical" id="muntinVertical" 
                     value="<%= selectedWindowSystem.muntinConfiguration.verticalDivisions %>" 
                     min="1" max="10" class="form-input w-full" onchange="updateMuntinPreview()">
            </div>
            
            <!-- Spacing -->
            <div>
              <label class="form-label">Spacing (inches)</label>
              <input type="number" name="muntinSpacing" id="muntinSpacing" 
                     value="<%= selectedWindowSystem.muntinConfiguration.spacing %>" 
                     min="0" step="0.1" class="form-input w-full" onchange="updateMuntinPreview()">
            </div>
            
            <!-- Muntin Profile (if available) -->
            <% if (selectedWindowSystem.muntinConfiguration.muntinProfile) { %>
              <div>
                <label class="form-label">Muntin Profile</label>
                <select name="muntinProfile" id="muntinProfile" class="form-input w-full">
                  <% allProfiles.forEach(profile => { %>
                    <% if (profile.isMuntin) { %>
                      <option value="<%= profile._id %>" 
                              data-price="<%= profile.pricePerMeter %>"
                              <%= selectedWindowSystem.muntinConfiguration.muntinProfile && selectedWindowSystem.muntinConfiguration.muntinProfile.toString() === profile._id.toString() ? 'selected' : '' %>>
                        <%= profile.name %> - <%= profile.muntinType.charAt(0).toUpperCase() + profile.muntinType.slice(1) %>
                      </option>
                    <% } %>
                  <% }) %>
                </select>
              </div>
            <% } %>
          </div>
          
          <!-- Muntin Preview -->
          <div class="mt-6 p-4 bg-gray-50 rounded-lg">
            <h4 class="text-sm font-medium text-gray-700 mb-3">Muntin Preview:</h4>
            <div class="flex items-center justify-center">
              <div id="muntinPreviewGrid" class="w-48 h-48 border-2 border-gray-300 bg-blue-50 relative rounded">
                <!-- Preview grid will be generated here -->
              </div>
            </div>
            <p class="text-xs text-gray-500 mt-2 text-center" id="muntinPreviewText">
              <%= selectedWindowSystem.muntinConfiguration.horizontalDivisions %>x<%= selectedWindowSystem.muntinConfiguration.verticalDivisions %> 
              <%= selectedWindowSystem.muntinConfiguration.muntinType.charAt(0).toUpperCase() + selectedWindowSystem.muntinConfiguration.muntinType.slice(1) %> Grid
            </p>
          </div>
        </div>
      <% } %>

      <!-- Pricing Summary -->
      <div class="bg-white rounded-lg shadow-sm p-6">
        <h3 class="text-xl font-semibold text-gray-800 mb-4">Pricing Summary</h3>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h4 class="text-lg font-medium text-gray-700 mb-4">Cost Breakdown</h4>
            <div class="space-y-3">
              <div class="flex justify-between">
                <span class="text-gray-600">Base Materials:</span>
                <span class="font-medium" id="baseMaterialsCost">$0.00</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600">Glass Cost:</span>
                <span class="font-medium" id="glassCost">$0.00</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600">Accessories:</span>
                <span class="font-medium" id="accessoriesCost">$0.00</span>
              </div>
              <div class="flex justify-between" id="muntinCostRow" style="display: none;">
                <span class="text-gray-600">Muntins:</span>
                <span class="font-medium" id="muntinCost">$0.00</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600">Additional Costs:</span>
                <span class="font-medium" id="additionalCosts">$0.00</span>
              </div>
              <hr class="border-gray-300">
              <div class="flex justify-between text-lg font-bold">
                <span class="text-gray-800">Total Price:</span>
                <span class="text-green-600" id="finalTotalPrice">$0.00</span>
              </div>
            </div>
          </div>
          
          <div>
            <h4 class="text-lg font-medium text-gray-700 mb-4">Additional Information</h4>
            <div>
              <label for="notes" class="form-label">Notes (Optional)</label>
              <textarea id="notes" name="notes" rows="4" class="form-input w-full" 
                        placeholder="Any special requirements or notes for this window..."><%= 
                          ((typeof isEdit !== 'undefined' && isEdit) && existingWindow && existingWindow.description) ? 
                          (() => {
                            const desc = existingWindow.description;
                            const notesMatch = desc.match(/Notes: (.+)$/m);
                            return notesMatch ? notesMatch[1] : '';
                          })() : '' 
                        %></textarea>
            </div>
          </div>
        </div>
      </div>

      <!-- Action Buttons -->
      <div class="flex justify-between items-center">
        <a href="/projects/<%= project._id %>" class="btn-secondary">
          ← Back to Project
        </a>
        
        <button type="submit" class="bg-green-600 hover:bg-green-700 text-white px-8 py-3 rounded-lg font-medium">
          <%= (typeof isEdit !== 'undefined' && isEdit) ? 'Update Window Configuration' : 'Save Window Configuration' %>
        </button>
      </div>
    </form>
  </main>

  <%- include('../partials/_footer.ejs') %>

  <script>
    // Initialize variables from server data
    const costSettings = <%- JSON.stringify(costSettings) %>;
    const exchangeRateValue = <%= exchangeRate || 4000 %>;

    // Currency conversion function
    function convertToCOP(price, currency, exchangeRate) {
      if (currency === 'COP') return price;
      if (currency === 'USD') return price * exchangeRate;
      return price; // fallback
    }

    // Format numbers with commas
    function formatCurrency(amount) {
      return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      }).format(amount);
    }

    function calculatePricing() {
      const width = parseFloat(document.getElementById('width').value) || 0;
      const height = parseFloat(document.getElementById('height').value) || 0;
      const quantity = parseInt(document.getElementById('quantity').value) || 1;
      
      // Calculate square footage (convert inches to square meters: 1 sqm = 1550 sq inches)
      const areaInches = width * height;
      const areaSquareMeters = areaInches / 1550;
      
      let totalCost = 0;
      
      // Glass cost
      const glassSelect = document.getElementById('glassType');
      const selectedGlass = glassSelect.options[glassSelect.selectedIndex];
      const glassPrice = parseFloat(selectedGlass?.getAttribute('data-price')) || 0;
      const glassCurrency = selectedGlass?.getAttribute('data-currency') || 'COP';
      const glassPriceCOP = convertToCOP(glassPrice, glassCurrency, exchangeRateValue);
      const glassCost = glassPriceCOP * areaSquareMeters;
      totalCost += glassCost;
      
      // Profile costs
      let profilesCost = 0;
      const profileSelects = document.querySelectorAll('.profile-select');
      profileSelects.forEach((select, index) => {
        const selectedProfile = select.options[select.selectedIndex];
        const pricePerMeter = parseFloat(selectedProfile?.getAttribute('data-price')) || 0;
        const profileCurrency = selectedProfile?.getAttribute('data-currency') || 'COP';
        const pricePerMeterCOP = convertToCOP(pricePerMeter, profileCurrency, exchangeRateValue);
        const qty = parseInt(select.closest('.component-card').querySelector('input[name*="quantity"]').value) || 1;
        const lengthDiscount = parseFloat(select.closest('.component-card').querySelector('input[name*="lengthDiscount"]').value) || 0;
        
        // Estimate profile length based on window perimeter
        const perimeterInches = 2 * (width + height);
        const perimeterMeters = perimeterInches * 0.0254; // Convert inches to meters
        const adjustedLength = Math.max(0, perimeterMeters - (lengthDiscount * 0.0254));
        
        profilesCost += pricePerMeterCOP * adjustedLength * qty;
      });
      totalCost += profilesCost;
      
      // Accessory costs
      let accessoriesCost = 0;
      
      // Individual accessories (dropdown selects)
      const accessorySelects = document.querySelectorAll('.accessory-select');
      accessorySelects.forEach(select => {
        const selectedAccessory = select.options[select.selectedIndex];
        const price = parseFloat(selectedAccessory?.getAttribute('data-price')) || 0;
        const accessoryCurrency = selectedAccessory?.getAttribute('data-currency') || 'COP';
        const priceCOP = convertToCOP(price, accessoryCurrency, exchangeRateValue);
        const qty = parseInt(select.closest('.component-card').querySelector('input[name*="quantity"]').value) || 1;
        accessoriesCost += priceCOP * qty;
      });
      
      // Choice group accessories (radio buttons and checkboxes)
      const checkedChoices = document.querySelectorAll('input[name^="choiceGroup_"]:checked');
      
      checkedChoices.forEach(choice => {
        const accessoryId = choice.value;
        const groupName = choice.name.replace('choiceGroup_', '');
        
        // Find the corresponding price and quantity inputs
        const priceInputSelector = `input[name="accessories_choice_${groupName}_${accessoryId}_price"]`;
        const quantityInputSelector = `input[name="accessories_choice_${groupName}_${accessoryId}_quantity"]`;
        const currencyInputSelector = `input[name="accessories_choice_${groupName}_${accessoryId}_currency"]`;
        const priceInput = document.querySelector(priceInputSelector);
        const quantityInput = document.querySelector(quantityInputSelector);
        const currencyInput = document.querySelector(currencyInputSelector);
        
        if (priceInput && quantityInput) {
          const price = parseFloat(priceInput.value) || 0;
          const accessoryCurrency = currencyInput?.value || 'COP';
          const priceCOP = convertToCOP(price, accessoryCurrency, exchangeRateValue);
          const qty = parseInt(quantityInput.value) || 1;
          accessoriesCost += priceCOP * qty;
        }
      });
      
      totalCost += accessoriesCost;
      
      // Muntin costs
      let muntinCost = 0;
      const muntinProfileSelect = document.getElementById('muntinProfile');
      if (muntinProfileSelect) {
        const selectedMuntinProfile = muntinProfileSelect.options[muntinProfileSelect.selectedIndex];
        const muntinPricePerMeter = parseFloat(selectedMuntinProfile?.getAttribute('data-price')) || 0;
        const muntinCurrency = selectedMuntinProfile?.getAttribute('data-currency') || 'COP';
        const muntinPricePerMeterCOP = convertToCOP(muntinPricePerMeter, muntinCurrency, exchangeRateValue);
        
        // Calculate muntin length based on divisions
        const horizontalDivisions = parseInt(document.getElementById('muntinHorizontal')?.value) || 0;
        const verticalDivisions = parseInt(document.getElementById('muntinVertical')?.value) || 0;
        
        if (horizontalDivisions > 0 && verticalDivisions > 0) {
          // Calculate total muntin length
          const horizontalMuntins = horizontalDivisions - 1; // Number of horizontal bars
          const verticalMuntins = verticalDivisions - 1; // Number of vertical bars
          
          const horizontalLength = horizontalMuntins * width * 0.0254; // Convert to meters
          const verticalLength = verticalMuntins * height * 0.0254; // Convert to meters
          
          const totalMuntinLength = horizontalLength + verticalLength;
          muntinCost = muntinPricePerMeterCOP * totalMuntinLength;
        }
      }
      totalCost += muntinCost;
      
      // Apply per-window cost settings (as percentages)
      const baseCost = totalCost;
      const additionalCosts = baseCost * (
        (costSettings.packaging / 100) +
        (costSettings.labor / 100) +
        (costSettings.indirectCosts / 100)
      );
      
      totalCost += additionalCosts;
      const finalTotal = totalCost * quantity;
      
      // Update displays with comma formatting
      document.getElementById('totalPrice').textContent = formatCurrency(finalTotal);
      document.getElementById('baseMaterialsCost').textContent = formatCurrency(profilesCost);
      document.getElementById('glassCost').textContent = formatCurrency(glassCost);
      document.getElementById('accessoriesCost').textContent = formatCurrency(accessoriesCost);
      
      // Show/hide muntin cost row and update value
      const muntinCostRow = document.getElementById('muntinCostRow');
      if (muntinCostRow) {
        if (muntinCost > 0) {
          muntinCostRow.style.display = 'flex';
          document.getElementById('muntinCost').textContent = formatCurrency(muntinCost);
        } else {
          muntinCostRow.style.display = 'none';
        }
      }
      
      document.getElementById('additionalCosts').textContent = formatCurrency(additionalCosts);
      document.getElementById('finalTotalPrice').textContent = formatCurrency(finalTotal);
    }

    // Current unit state
    let currentUnit = 'inches';
    
    // Unit conversion functions
    function inchesToMm(inches) {
      return inches * 25.4;
    }
    
    function mmToInches(mm) {
      return mm / 25.4;
    }
    
    // Switch between units
    function switchUnits(newUnit) {
      const widthInput = document.getElementById('width');
      const heightInput = document.getElementById('height');
      const widthUnitSpan = document.getElementById('widthUnit');
      const heightUnitSpan = document.getElementById('heightUnit');
      const lengthDiscountInputs = document.querySelectorAll('input[name*="lengthDiscount"]');
      
      const inchesBtn = document.getElementById('inchesBtn');
      const mmBtn = document.getElementById('mmBtn');
      
      // Get current values
      const currentWidth = parseFloat(widthInput.value) || 0;
      const currentHeight = parseFloat(heightInput.value) || 0;
      
      // Convert values if switching units
      if (currentUnit !== newUnit && (currentWidth || currentHeight)) {
        let newWidth, newHeight;
        
        if (newUnit === 'mm' && currentUnit === 'inches') {
          newWidth = inchesToMm(currentWidth);
          newHeight = inchesToMm(currentHeight);
        } else if (newUnit === 'inches' && currentUnit === 'mm') {
          newWidth = mmToInches(currentWidth);
          newHeight = mmToInches(currentHeight);
        } else {
          newWidth = currentWidth;
          newHeight = currentHeight;
        }
        
        // Update input values
        widthInput.value = newWidth ? newWidth.toFixed(2) : '';
        heightInput.value = newHeight ? newHeight.toFixed(2) : '';
        
        // Convert length discount values
        lengthDiscountInputs.forEach(input => {
          const currentValue = parseFloat(input.value) || 0;
          if (currentValue) {
            let newValue;
            if (newUnit === 'mm' && currentUnit === 'inches') {
              newValue = inchesToMm(currentValue);
            } else if (newUnit === 'inches' && currentUnit === 'mm') {
              newValue = mmToInches(currentValue);
            } else {
              newValue = currentValue;
            }
            input.value = newValue.toFixed(2);
          }
        });
      }
      
      // Update unit labels
      const unitAbbr = newUnit === 'inches' ? 'in' : 'mm';
      widthUnitSpan.textContent = unitAbbr;
      heightUnitSpan.textContent = unitAbbr;
      
      // Update length discount labels
      const lengthDiscountLabels = document.querySelectorAll('label[for*="lengthDiscount"], .form-label');
      lengthDiscountLabels.forEach(label => {
        if (label.textContent.includes('Length Discount')) {
          label.innerHTML = `Length Discount (${unitAbbr})`;
        }
      });
      
      // Update button states
      inchesBtn.classList.toggle('active', newUnit === 'inches');
      mmBtn.classList.toggle('active', newUnit === 'mm');
      
      // Update current unit
      currentUnit = newUnit;
      
      // Update hidden input
      document.getElementById('currentUnit').value = newUnit;
      
      // Recalculate pricing
      calculatePricing();
    }
    
    // Modified calculatePricing function to handle unit conversion
    function calculatePricingWithUnits() {
      // Get values in current unit
      let width = parseFloat(document.getElementById('width').value) || 0;
      let height = parseFloat(document.getElementById('height').value) || 0;
      const quantity = parseInt(document.getElementById('quantity').value) || 1;
      
      // Convert to inches for calculations (since backend expects inches)
      if (currentUnit === 'mm') {
        width = mmToInches(width);
        height = mmToInches(height);
      }
      
      // Calculate square footage (convert inches to square meters: 1 sqm = 1550 sq inches)
      const areaInches = width * height;
      const areaSquareMeters = areaInches / 1550;
      
      let totalCost = 0;
      
      // Glass cost
      const glassSelect = document.getElementById('glassType');
      const selectedGlass = glassSelect.options[glassSelect.selectedIndex];
      const glassPrice = parseFloat(selectedGlass?.getAttribute('data-price')) || 0;
      const glassCost = glassPrice * areaSquareMeters;
      totalCost += glassCost;
      
      // Profile costs
      let profilesCost = 0;
      const profileSelects = document.querySelectorAll('.profile-select');
      profileSelects.forEach((select, index) => {
        const selectedProfile = select.options[select.selectedIndex];
        const pricePerMeter = parseFloat(selectedProfile?.getAttribute('data-price')) || 0;
        const qty = parseInt(select.closest('.component-card').querySelector('input[name*="quantity"]').value) || 1;
        let lengthDiscount = parseFloat(select.closest('.component-card').querySelector('input[name*="lengthDiscount"]').value) || 0;
        
        // Convert length discount to inches if needed
        if (currentUnit === 'mm') {
          lengthDiscount = mmToInches(lengthDiscount);
        }
        
        // Estimate profile length based on window perimeter
        const perimeterInches = 2 * (width + height);
        const perimeterMeters = perimeterInches * 0.0254; // Convert inches to meters
        const adjustedLength = Math.max(0, perimeterMeters - (lengthDiscount * 0.0254));
        
        profilesCost += pricePerMeter * adjustedLength * qty;
      });
      totalCost += profilesCost;
      
      // Accessory costs (same as before)
      let accessoriesCost = 0;
      
      // Individual accessories (dropdown selects)
      const accessorySelects = document.querySelectorAll('.accessory-select');
      accessorySelects.forEach(select => {
        const selectedAccessory = select.options[select.selectedIndex];
        const price = parseFloat(selectedAccessory?.getAttribute('data-price')) || 0;
        const qty = parseInt(select.closest('.component-card').querySelector('input[name*="quantity"]').value) || 1;
        accessoriesCost += price * qty;
      });
      
      // Choice group accessories (radio buttons and checkboxes)
      const checkedChoices = document.querySelectorAll('input[name^="choiceGroup_"]:checked');
      
      checkedChoices.forEach(choice => {
        const accessoryId = choice.value;
        const groupName = choice.name.replace('choiceGroup_', '');
        
        // Find the corresponding price and quantity inputs
        const priceInputSelector = `input[name="accessories_choice_${groupName}_${accessoryId}_price"]`;
        const quantityInputSelector = `input[name="accessories_choice_${groupName}_${accessoryId}_quantity"]`;
        const priceInput = document.querySelector(priceInputSelector);
        const quantityInput = document.querySelector(quantityInputSelector);
        
        if (priceInput && quantityInput) {
          const price = parseFloat(priceInput.value) || 0;
          const qty = parseInt(quantityInput.value) || 1;
          accessoriesCost += price * qty;
        }
      });
      
      totalCost += accessoriesCost;
      
      // Apply per-window cost settings (as percentages)
      const baseCost = totalCost;
      const additionalCosts = baseCost * (
        (costSettings.packaging / 100) +
        (costSettings.labor / 100) +
        (costSettings.indirectCosts / 100)
      );
      
      totalCost += additionalCosts;
      const finalTotal = totalCost * quantity;
      
      // Update displays with comma formatting
      document.getElementById('totalPrice').textContent = formatCurrency(finalTotal);
      document.getElementById('baseMaterialsCost').textContent = formatCurrency(profilesCost);
      document.getElementById('glassCost').textContent = formatCurrency(glassCost);
      document.getElementById('accessoriesCost').textContent = formatCurrency(accessoriesCost);
      document.getElementById('additionalCosts').textContent = formatCurrency(additionalCosts);
      document.getElementById('finalTotalPrice').textContent = formatCurrency(finalTotal);
    }
    
    // Override the original calculatePricing function
    window.calculatePricing = calculatePricingWithUnits;

    // Form submission handler to ensure backend gets inches
    document.getElementById('windowConfigForm').addEventListener('submit', function(e) {
      const widthInput = document.getElementById('width');
      const heightInput = document.getElementById('height');
      const lengthDiscountInputs = document.querySelectorAll('input[name*="lengthDiscount"]');
      
      // Convert all measurements to inches if currently in mm
      if (currentUnit === 'mm') {
        // Convert width and height
        if (widthInput.value) {
          widthInput.value = mmToInches(parseFloat(widthInput.value)).toFixed(2);
        }
        if (heightInput.value) {
          heightInput.value = mmToInches(parseFloat(heightInput.value)).toFixed(2);
        }
        
        // Convert length discounts
        lengthDiscountInputs.forEach(input => {
          if (input.value) {
            input.value = mmToInches(parseFloat(input.value)).toFixed(2);
          }
        });
        
        // Update the unit tracker to inches so backend knows it's receiving inches
        document.getElementById('currentUnit').value = 'inches';
      }
    });

    // Choice group functions
    function selectChoice(choiceCard) {
      const input = choiceCard.querySelector('input[type="radio"], input[type="checkbox"]');
      if (input) {
        if (input.type === 'radio') {
          input.checked = true;
          handleChoiceGroupChange(input);
        } else if (input.type === 'checkbox') {
          input.checked = !input.checked;
          handleChoiceGroupChange(input);
        }
      }
    }

    function handleChoiceGroupChange(input) {
      const choiceCard = input.closest('.choice-option');
      const group = input.name.replace('choiceGroup_', '');
      
      // Update card styling
      updateChoiceCardStyling(choiceCard, input.checked);
      
      // For radio buttons, uncheck others in the same group
      if (input.type === 'radio') {
        const otherRadios = document.querySelectorAll(`input[name="${input.name}"]`);
        otherRadios.forEach(radio => {
          if (radio !== input) {
            const otherCard = radio.closest('.choice-option');
            updateChoiceCardStyling(otherCard, false);
          }
        });
      }
      
      // Recalculate pricing
      calculatePricing();
    }

    function updateChoiceCardStyling(choiceCard, isSelected) {
      if (!choiceCard) return;
      
      if (isSelected) {
        choiceCard.classList.add('border-blue-500', 'bg-blue-50');
        choiceCard.classList.remove('border-gray-300', 'hover:border-blue-400', 'hover:bg-blue-50');
      } else {
        choiceCard.classList.remove('border-blue-500', 'bg-blue-50');
        choiceCard.classList.add('border-gray-300', 'hover:border-blue-400', 'hover:bg-blue-50');
      }
    }

    // Initialize choice group visual states
    function initializeChoiceGroups() {
      const allChoiceInputs = document.querySelectorAll('input[name^="choiceGroup_"]');
      allChoiceInputs.forEach(input => {
        const choiceCard = input.closest('.choice-option');
        updateChoiceCardStyling(choiceCard, input.checked);
      });
    }

    // Window Preview Functions
    function updateWindowPreview() {
      const width = parseFloat(document.getElementById('width').value) || 0;
      const height = parseFloat(document.getElementById('height').value) || 0;
      const currentUnit = document.getElementById('currentUnit').value;
      
      // Update dimension labels
      const widthLabels = document.querySelectorAll('#widthValue');
      const heightLabels = document.querySelectorAll('#heightValue');
      const widthUnitLabels = document.querySelectorAll('#widthUnitLabel');
      const heightUnitLabels = document.querySelectorAll('#heightUnitLabel');
      
      widthLabels.forEach(label => {
        label.textContent = width.toFixed(2);
      });
      
      heightLabels.forEach(label => {
        label.textContent = height.toFixed(2);
      });
      
      widthUnitLabels.forEach(label => {
        label.textContent = currentUnit === 'mm' ? 'mm' : 'in';
      });
      
      heightUnitLabels.forEach(label => {
        label.textContent = currentUnit === 'mm' ? 'mm' : 'in';
      });
      
      // Update generic preview if no image
      const windowPreview = document.getElementById('windowPreview');
      if (windowPreview) {
        const maxWidth = 300;
        const maxHeight = 200;
        const scale = Math.min(maxWidth / width, maxHeight / height, 1);
        
        const displayWidth = Math.max(100, width * scale);
        const displayHeight = Math.max(75, height * scale);
        
        windowPreview.style.width = displayWidth + 'px';
        windowPreview.style.height = displayHeight + 'px';
      }
      
      // Update calculations
      updateCalculations(width, height, currentUnit);
    }
    
    function updateCalculations(width, height, unit) {
      let widthInches = width;
      let heightInches = height;
      
      if (unit === 'mm') {
        widthInches = mmToInches(width);
        heightInches = mmToInches(height);
      }
      
      // Calculate area in square feet
      const areaSqFt = (widthInches * heightInches) / 144;
      
      // Calculate perimeter in feet
      const perimeterFt = (2 * (widthInches + heightInches)) / 12;
      
      // Calculate aspect ratio
      const aspectRatio = widthInches > 0 ? heightInches / widthInches : 0;
      
      // Calculate glass area (assuming 90% of total area)
      const glassAreaSqFt = areaSqFt * 0.9;
      
      // Update displays
      document.getElementById('areaDisplay').textContent = areaSqFt.toFixed(2);
      document.getElementById('perimeterDisplay').textContent = perimeterFt.toFixed(2);
      document.getElementById('aspectRatioDisplay').textContent = aspectRatio.toFixed(2);
      document.getElementById('glassAreaDisplay').textContent = glassAreaSqFt.toFixed(2);
    }
    
    function setPresetSize(width, height) {
      document.getElementById('width').value = width;
      document.getElementById('height').value = height;
      updateWindowPreview();
      calculatePricing();
    }
    
    // Override the original calculatePricing function to also update preview
    const originalCalculatePricing = window.calculatePricing;
    window.calculatePricing = function() {
      if (originalCalculatePricing) {
        originalCalculatePricing();
      }
      updateWindowPreview();
    };
    
    // Override the switchUnits function to also update preview
    const originalSwitchUnits = window.switchUnits;
    window.switchUnits = function(unit) {
      if (originalSwitchUnits) {
        originalSwitchUnits(unit);
      }
      updateWindowPreview();
    };

    // Muntin Preview Function
    function updateMuntinPreview() {
      const horizontal = parseInt(document.getElementById('muntinHorizontal')?.value) || 1;
      const vertical = parseInt(document.getElementById('muntinVertical')?.value) || 1;
      const type = document.getElementById('muntinType')?.value || 'colonial';
      const previewGrid = document.getElementById('muntinPreviewGrid');
      const previewText = document.getElementById('muntinPreviewText');
      
      if (!previewGrid || !previewText) return;
      
      // Generate preview grid
      previewGrid.innerHTML = '';
      const cellWidth = 100 / horizontal;
      const cellHeight = 100 / vertical;
      
      for (let i = 0; i < horizontal; i++) {
        for (let j = 0; j < vertical; j++) {
          const cell = document.createElement('div');
          cell.style.position = 'absolute';
          cell.style.left = (i * cellWidth) + '%';
          cell.style.top = (j * cellHeight) + '%';
          cell.style.width = cellWidth + '%';
          cell.style.height = cellHeight + '%';
          cell.style.border = '1px solid #6b7280';
          cell.style.backgroundColor = '#e5e7eb';
          previewGrid.appendChild(cell);
        }
      }
      
      // Update preview text
      const typeLabel = type.charAt(0).toUpperCase() + type.slice(1);
      previewText.textContent = `${horizontal}x${vertical} ${typeLabel} Grid`;
      
      // Update pricing when muntin settings change
      calculatePricing();
    }
    
    // Initialize calculations
    document.addEventListener('DOMContentLoaded', function() {
      initializeChoiceGroups();
      calculatePricing();
      updateWindowPreview(); // Initialize preview
      
      // Initialize muntin preview if muntin configuration exists
      if (document.getElementById('muntinPreviewGrid')) {
        updateMuntinPreview();
      }
    });
  </script>
</body>
</html>
 